{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation Guide","text":""},{"location":"#build-pgmodeler-from-source-code","title":"Build PgModeler from source code","text":"<ol> <li>Guide for Ubuntu</li> <li>Guide for Mac</li> </ol>"},{"location":"#install-postgresql","title":"Install PostgreSQL","text":"<ol> <li>Install and Configure PostgreSQL</li> </ol>"},{"location":"#cassandra","title":"Cassandra","text":"<ol> <li>Cassandra Installation</li> </ol>"},{"location":"#janus-graph-database","title":"Janus Graph database","text":"<ol> <li>Install and configuration of database</li> <li>Gremlin Console</li> <li>Management API</li> <li>Indexing</li> <li>Drop Graph/database</li> </ol>"},{"location":"#install-pgadmin4","title":"Install PgAdmin4","text":"<ol> <li>PgAdmin using Apache2</li> <li>PgAdmin4 using Docker</li> <li>Update PgAdmin4 docker image</li> </ol>"},{"location":"#vmware-esxi","title":"VMware ESXi","text":"<ol> <li>Start VM's automatically during the boot</li> </ol>"},{"location":"#docker","title":"Docker","text":"<ol> <li>Installation</li> <li>Commands</li> <li>Build Image</li> <li>Context</li> <li>Persistent Data &amp; Volume</li> <li>Docker UI</li> <li>Network</li> <li>Docker Spring Boot</li> </ol>"},{"location":"#forticlient-vpn","title":"FortiClient VPN","text":"<ol> <li>Install Forticlient VPN on Ubuntu 20.04</li> <li>IPsec VPN in Ubuntu</li> </ol>"},{"location":"#fortigate","title":"Fortigate","text":"<ol> <li>IPsec Setup for Linux/Ubuntu</li> <li>Network Load balancing</li> </ol>"},{"location":"#java","title":"Java","text":"<p>1.Installation</p>"},{"location":"#python","title":"Python","text":"<p>1.Installation 2.Installation</p>"},{"location":"#jenkins","title":"Jenkins","text":"<ol> <li>Install Jenkin</li> <li>Intall jenkin on docker</li> <li>Troubleshoot</li> </ol>"},{"location":"#install-redis-from-source","title":"Install Redis from source","text":"<ol> <li>Guide for Ubuntu</li> <li>Guide for Mac OS</li> <li>Enable remote access</li> </ol>"},{"location":"#aws-website-hosting","title":"AWS - Website hosting","text":"<ol> <li>Host static website using S3</li> <li>Add TLS for AWS S3 hosted static website using Let's Encrypt</li> <li>S3</li> <li>Commands</li> <li>Set up Local Programmatic user in Ubuntu/Mac Os</li> <li>Cross Account S3 bucket object Copy</li> </ol>"},{"location":"#tls","title":"TLS","text":"<ol> <li>Generate Free TLS/SSL using Let's Encrypt</li> </ol>"},{"location":"#nginx","title":"Nginx","text":"<ol> <li>Install &amp; Virtual host Niginx</li> <li>Reverse Proxy using symblink</li> <li>Add TLS For Nginx Hosted Site</li> </ol>"},{"location":"#git","title":"Git","text":"<ol> <li>SSH Clone</li> </ol>"},{"location":"#12-factor-app","title":"12 Factor App","text":""},{"location":"#pgmodeler-output","title":"PgModeler Output","text":""},{"location":"#pgadmin4-output","title":"PgAdmin4 Output","text":""},{"location":"#nginx-output","title":"Nginx output","text":""},{"location":"#spring-boot","title":"Spring boot","text":"<ol> <li>Create JAR</li> </ol>"},{"location":"#forticlient","title":"Forticlient","text":""},{"location":"#maven","title":"Maven","text":"<ol> <li>Upgrade Maven</li> </ol>"},{"location":"Cassandra/Installation/","title":"Installation","text":""},{"location":"Cassandra/Installation/#installation-of-cassandra","title":"Installation of Cassandra","text":"<ul> <li>Download the Cassandra and untar the installation files to <code>/opt</code>.</li> </ul> <pre><code>cd /opt\nwget http://archive.apache.org/dist/cassandra/X.xx.x/apache-cassandra-3.11.0-bin.tar.gz\ntar -xf apache-cassandra-3.11.0-bin.tar.gz\n</code></pre> <ul> <li>Create new linux user <code>cassandra</code> and give ownership to <code>cassandra</code> user </li> </ul> <pre><code>adduser cassandra\nchown -R cassandra:cassandra apache-cassandra-X.xx.x\n</code></pre> <ul> <li>Go to bin folder and run the following command to </li> </ul> <pre><code>./cassandra -f\nor \n./cassandra\n</code></pre>"},{"location":"ELK/ELK_Sample/","title":"Sample data to test it in Kibana console","text":"<pre><code>POST sample/_doc\n{\n  \"name\": \"Thirumal 19\",\n  \"age\" : \"29\",\n  \"location\": \"Bangalore\"\n}\n\nGET /sample/_search\n\nPUT /sample/_doc/_N2-2HQBcL4YgOAdFPHe\n{\n  \"name\": \"Thirumal 129\",\n  \"age\" : \"29\",\n  \"location\": \"Bangalore\"\n}\n\nGET _search\n{\n  \"query\": {\n    \"match_all\": \"sample\"\n  }\n}\n</code></pre>"},{"location":"ELK/docker-setup/","title":"Docker setup","text":""},{"location":"ELK/docker-setup/#increase-virtual-memory","title":"Increase Virtual Memory","text":"<p>sysctl -w vm.max_map_count=262144</p>"},{"location":"ELK/docker-setup/#run-docker-compose","title":"Run Docker compose","text":""},{"location":"Forticlient/Install_FortiClient_Ubuntu/","title":"Install FortiClient in Ubuntu","text":"<ol> <li> <p>Download Foriclient 6.4</p> <p><code>wget -c 'https://filestore.fortinet.com/forticlient/downloads/FortiClientFullVPNInstaller_6.4.0.0851.deb'</code></p> </li> <li> <p>Install using the following commands</p> <p><code>sudo dpkg -i FortiClientFullVPNInstaller_6.4.0.0851.deb</code></p> </li> <li> <p>If you are getting any dependencies error then <code>run</code> the following commands     <pre><code>sudo apt --fix-broken install\nsudo dpkg -i FortiClientFullVPNInstaller_6.4.0.0851.deb\n</code></pre></p> </li> </ol> <p> </p>"},{"location":"Forticlient/Install_FortiClient_Ubuntu/#tested-with-ubuntu-2004","title":"Tested with Ubuntu 20.04","text":""},{"location":"Forticlient/Ipsec%20VPN%20in%20Ubuntu/","title":"Ipsec VPN in Ubuntu","text":""},{"location":"Forticlient/Ipsec%20VPN%20in%20Ubuntu/#connect-to-ipsec-vpn-in-ubuntu","title":"Connect to IPSec VPN in Ubuntu","text":""},{"location":"Forticlient/Ipsec%20VPN%20in%20Ubuntu/#install","title":"Install","text":"<pre><code>sudo add-apt-repository ppa:nm-l2tp/network-manager-l2tp\nsudo apt update\nsudo apt-get install network-manager-l2tp  network-manager-l2tp-gnome\n</code></pre>"},{"location":"Forticlient/Ipsec%20VPN%20in%20Ubuntu/#configure","title":"configure","text":"<ul> <li>Go to <code>Network</code> and click on <code>+</code> in <code>VPN</code></li> <li>Select <code>Layer 2  Tunneling Protocol(L2TP)</code> in the pop-up window</li> <li>Enter the gateway IP, uesr name, password</li> <li>Click on <code>IPsec Settings</code><ul> <li>Check <code>Enable IPSec tunnel to L2TP host</code></li> <li>Enter the pre-shared key</li> </ul> </li> <li>Connect to VPN !!!!</li> </ul>"},{"location":"Forticlient/Ipsec%20VPN%20in%20Ubuntu/#known-problems","title":"Known problems","text":"<ul> <li>Internet access<ul> <li>Go to <code>VPN</code> -&gt; <code>IPv4</code> -&gt; check on <code>Use this connection only for reources on it's network</code></li> </ul> </li> </ul>"},{"location":"IP%20Sec%20VPN/VPN%20Connection%20without%20any%20client%20in%20MAC/","title":"VPN Connection without any client in MAC","text":"<ol> <li> <p>Go to <code>System Preferences</code> -&gt; <code>Network</code></p> </li> <li> <p>Create new <code>Service</code> by clicking <code>+</code> in the left down corner.</p> </li> <li> <p>Select the following,</p> <ul> <li><code>Interface</code>    =&gt; <code>VPN</code></li> <li><code>VPN Type</code>     =&gt; <code>Cisco IPSec</code></li> <li><code>Service Name</code> =&gt; <code>${Give Any Name}</code></li> </ul> <p> 4. Enter the following details</p> <ul> <li>Server Address</li> <li>Account Name/User Name</li> <li>Password</li> </ul> </li> </ol> <p></p> <pre><code>* Click on `Authentication Settings` and add the following details,\n    * `Shared secret`\n    * `Group Name`\n* Finally, click 'Connect'\n\n![Authenticator](Authenticator.png)\n</code></pre> <ol> <li>(OPTIONAL) Check the box to 'Show VPN status in the menu bar'.</li> </ol>"},{"location":"JanusGraph/Cassandra%20Storage%20Backend/","title":"Cassandra Storage Backend","text":""},{"location":"JanusGraph/Cassandra%20Storage%20Backend/#cassandra-storage-backend","title":"Cassandra Storage Backend","text":"<p>Change the follwoing line in <code>janusgraph-server.sh</code></p> <pre><code>useGremlinServerConfiguration(){\n    if [[ -n \"$1\" ]] ; then\n      setValidConfiguration \"$1\"\n    elif [[ -z \"$JANUSGRAPH_YAML\" ]]; then\n      setValidConfiguration \"gremlin-server/gremlin-server-cql.yaml\"\n    elif [[ -r \"$JANUSGRAPH_YAML\" ]]; then\n      setValidConfiguration \"$JANUSGRAPH_YAML\"\n    fi\n}\n</code></pre>"},{"location":"JanusGraph/Cassandra%20Storage%20Backend/#view-the-graph-data-saved-in-cassandra","title":"View the Graph Data Saved In Cassandra","text":"<p>Switch to the <code>cassandra</code> user. And run <code>cqlsh</code> which is a Cassandra client. Note that you will need to install Python if it is not already installed.</p> <pre><code>su cassandra\n/opt/apache-cassandra-X.xx.x/bin/cqlsh\n</code></pre> <p>Get the list of keyspaces.</p> <pre><code>./cqlsh\n\ncqlsh&gt; DESCRIBE KEYSPACES;\n\nsystem_schema  system      system_distributed\nsystem_auth    janusgraph  system_traces\n</code></pre> <p>You see that JanusGraph created a keyspace \u201cjanusgraph\u201d. Let\u2019s use this keyspace and get the list of tables under it.</p> <pre><code>cqlsh&gt; USE janusgraph;\n\ncqlsh:janusgraph&gt; DESCRIBE TABLES;\n\nedgestore_lock_  graphindex_lock_         janusgraph_ids\ntxlog            systemlog                graphindex\nedgestore        system_properties_lock_  system_properties\n</code></pre> <p>The most important table is \u201cedgestore\u201d. This is where all the graph data (vertices, edges and properties) are stored. So let\u2019s view this table data.</p> <pre><code>cqlsh: janusgraph&gt; SELECT * FROM edgestore;\n</code></pre> <p>output:-</p> <p><code>``  key                | column1            | value --------------------+--------------------+----------------------------  0x0000000000000c15 |               0x02 |                 0x00015480  0x0000000000000c15 |             0x10c0 |   0xa072741e6b6e6f77ee5080  0x0000000000000c15 |       0x10c2806400 |           0x8f00018e008080  0x0000000000000c15 |       0x10c2806800 |           0x9981018e008180  0x0000000000000c15 |       0x10c2806c00 |           0xad80018e008280  0x0000000000000c15 |       0x10c2807000 |           0x9981018e008380  0x0000000000000c15 |       0x10c2807400 |           0xae80018e008480</code>  0x0000000000000c15 |       0x10c2807800 |           0xb082018e008680  0x0000000000000c15 |       0x10c2807c00 |           0xb382018e008780  0x0000000000000c15 |             0x10c4 |                 0x00805880  0x0000000000000c15 |             0x10c8 |   0x008005b873e162aaf86080  0x4000000000000080 |               0x02 |                 0x00010488  0x4000000000000080 |               0x24 |               0x048d0888ff  0x4000000000000080 |             0x50c0 |               0xa070b10c88</p> <p>```</p>"},{"location":"JanusGraph/Drop%20Database/","title":"Drop Database","text":""},{"location":"JanusGraph/Drop%20Database/#connect-to-gremlin-console","title":"Connect to Gremlin Console","text":"<p>Connect to gremlin and open session</p> <pre><code> ./gremlin.sh \n\n:remote connect tinkerpop.server conf/remote.yaml session\n\n:remote console\n</code></pre>"},{"location":"JanusGraph/Drop%20Database/#drop-database","title":"Drop database","text":"<p>Give proper properties file to drop</p> <pre><code>gremlin&gt; graph = JanusGraphFactory.open('/opt/janusgraph-1.0.0-rc1/conf/janusgraph-cql.properties')\n==&gt;standardjanusgraph[cql:[127.0.0.1]]\ngremlin&gt; JanusGraphFactory.drop(graph);\n</code></pre>"},{"location":"JanusGraph/Gremlin%20Console/","title":"Gremlin Console","text":""},{"location":"JanusGraph/Gremlin%20Console/#connect-using-gremlin-console","title":"Connect using Gremlin Console","text":"<ul> <li>Download and unzip apache gremlin console </li> <li>Edit the <code>IP address</code> in <code>conf/remote-objects.yaml</code> file</li> <li>Run <code>bin/gremlin.sh</code></li> </ul> <pre><code>$ bin/gremlin.sh\n\n        \\,,,/\n        (o o)\n-----oOOo-(3)-oOOo-----\n09:12:24 INFO  org.apache.tinkerpop.gremlin.hadoop.structure.HadoopGraph  - HADOOP_GREMLIN_LIBS is set to: /usr/local/janusgraph/lib\nplugin activated: tinkerpop.hadoop\nplugin activated: janusgraph.imports\n</code></pre> <p>To connect to remote server :-</p> <pre><code>gremlin&gt; :remote connect tinkerpop.server conf/remote.yaml\n\n##&gt;Configured localhost/127.0.0.1:8182\ngremlin&gt; :remote console\n\n##&gt;All scripts will now be sent to Gremlin Server - [localhost/127.0.0.1:8182] - type ':remote console' to return to local mode\n\ngremlin&gt; g.V().count()\n\ngremlin&gt; graph\n\ngremlin&gt; g\n\ngremlin&gt;:exit\n</code></pre>"},{"location":"JanusGraph/Hosting%20Multiple%20Graph/","title":"Hosting multiple Graphs","text":"<p>Creating additional graphs can be done in two ways</p> <ul> <li>By editing config files - requires restart</li> <li> <p>By configuration factor - restart is not required</p> </li> <li> <p>Create config file for new graph</p> </li> <li>Add the config file path to gremlin conf file</li> <li>Add the graph value to groov script</li> </ul>"},{"location":"JanusGraph/Hosting%20Multiple%20Graph/#create-new-config-file","title":"Create new config file","text":""},{"location":"JanusGraph/Installation/","title":"Installation","text":""},{"location":"JanusGraph/Installation/#installation-of-janusgraph-database","title":"Installation of JanusGraph database","text":""},{"location":"JanusGraph/Installation/#dependencies","title":"Dependencies","text":"<ul> <li>OpenJdk 11 Refer Guide</li> <li>Cassandra (Used in this tutorial, can use other backend storage)</li> </ul>"},{"location":"JanusGraph/Installation/#download-setup-janusgraph","title":"Download &amp; Setup JanusGraph","text":"<ul> <li>Download the JanusGraph and create new linux user 'janus' and unzip the download to <code>/opt</code> and give ownership to <code>janus</code> user</li> </ul> <pre><code>cd /opt\nadduser janus\nchown -R janus:janus janusgraph-X.xx.x\n</code></pre> <ul> <li>By default, the janus will work with inmemory, use Cassandra</li> </ul>"},{"location":"JanusGraph/Installation/#run-","title":"Run :-","text":"<p>Edit <code>/opt/janusgraph-1.0.0-rc1/bin/janusgraph-server.sh</code> file, and set <code>gremlin-server/gremlin-server-cql.yaml</code> value to </p> <pre><code>useGremlinServerConfiguration(){\n    if [[ -n \"$1\" ]] ; then\n      setValidConfiguration \"$1\"\n    elif [[ -z \"$JANUSGRAPH_YAML\" ]]; then\n      setValidConfiguration \"gremlin-server/gremlin-server-cql.yaml\"\n    elif [[ -r \"$JANUSGRAPH_YAML\" ]]; then\n      setValidConfiguration \"$JANUSGRAPH_YAML\"\n    fi\n}\n</code></pre> <p>Then, to start</p> <p><pre><code>./janusgraph-server.sh start\n</code></pre> and to stop <pre><code>./janusgraph-server.sh stop\n</code></pre> to restart <pre><code>./janusgraph-server.sh restart\n</code></pre></p>"},{"location":"JanusGraph/Installation/#running-janusgraph-inside-a-docker-container","title":"Running JanusGraph inside a Docker container","text":"<pre><code>docker run -it -p 8182:8182 janusgraph/janusgraph\n</code></pre>"},{"location":"JanusGraph/Management%20API/","title":"Management API","text":""},{"location":"JanusGraph/Management%20API/#the-janusgraph-management-api","title":"The JanusGraph management API","text":"<p>Using management API, we can define the following,</p> <ul> <li>Edge, </li> <li>Vertex </li> <li>Property schema types </li> <li>Index.</li> </ul>"},{"location":"JanusGraph/Management%20API/#manage-by-gremlin","title":"Manage by Gremlin","text":"<p>Connect to gremlin and open session</p> <pre><code> ./gremlin.sh \n\n:remote connect tinkerpop.server conf/remote.yaml session\n\n:remote console\n\nmgmt = graph.openManagement()\n\n# mgmt.commit()\n</code></pre>"},{"location":"JanusGraph/Management%20API/#print-schema","title":"Print Schema","text":"<pre><code>mgmt.printSchema()\n</code></pre>"},{"location":"JanusGraph/Management%20API/#define-vertex-schema","title":"Define Vertex schema","text":"<p>List all vertex label</p> <pre><code>mgmt.getVertexLabels()\n</code></pre> <p>List all edge label</p> <pre><code>mgmt.getRelationTypes(EdgeLabel.class)\n</code></pre> <p>List all properties key</p> <pre><code>mgmt.getRelationTypes(PropertyKey.class)\n</code></pre> <p>Cardinality of a property</p> <pre><code>mgmt.getPropertyKey('name').cardinality()\n==&gt;SINGLE\n</code></pre> <p>Data type of property</p> <pre><code>gremlin&gt; mgmt.getPropertyKey('name').dataType()\n==&gt;class java.lang.String\n</code></pre> <p>Existence of a label</p> <pre><code>mgmt.containsEdgeLabel('route')\ntrue\n\nmgmt.containsVertexLabel('user')\ntrue\n</code></pre>"},{"location":"JanusGraph/Management%20API/#creating-vertex-label","title":"Creating Vertex Label","text":"<pre><code>mgmt.makeVertexLabel('user').make()\nmgmt.commit()\n</code></pre>"},{"location":"JanusGraph/Management%20API/#defining-edge-labels-and-usage","title":"Defining edge labels and usage","text":"<p>Allowed usages are </p> <ul> <li>MULTI - default </li> <li>MANY2ONE</li> <li>ONE2MANY</li> <li>ONE2ONE </li> <li>SIMPLE</li> </ul> <pre><code>mgmt.makeEdgeLabel('contains').multiplicity(SIMPLE).make()\nmgmt.commit()\n</code></pre>"},{"location":"JanusGraph/Management%20API/#creating-a-property-with-cardinality","title":"Creating a property with cardinality","text":"<p>Allowed cardinalities are </p> <ul> <li>SINGLE - default</li> <li>LIST</li> <li>SET</li> </ul> <pre><code>mgmt.makePropertyKey('name').dataType(String.class).cardinality(LIST).make()\nmgmt.commit()\n</code></pre>"},{"location":"JanusGraph/Management%20API/#display-the-property-keys-along-with-their-data-types-and-cardinality-settings","title":"Display the property keys along with their data types and cardinality settings","text":"<pre><code>types = mgmt.getRelationTypes(PropertyKey.class)\ntypes.each{println \"$it\\t: \" + mgmt.getPropertyKey(\"$it\").dataType() + \" \" + mgmt.getPropertyKey(\"$it\").cardinality()}\n</code></pre>"},{"location":"JanusGraph/Management%20API/#drop-database","title":"Drop database","text":"<pre><code>gremlin&gt; graph = JanusGraphFactory.open('/opt/janusgraph-1.0.0-rc1/conf/janusgraph-cql.properties')\n==&gt;standardjanusgraph[cql:[127.0.0.1]]\ngremlin&gt; JanusGraphFactory.drop(graph);\n</code></pre>"},{"location":"JanusGraph/Trobleshoot/","title":"Trobleshoot","text":""},{"location":"JanusGraph/Trobleshoot/#allow-user-defined-id-to-vertex-edge-","title":"Allow user defined ID to Vertex &amp; Edge :-","text":"<p>Set the below property in <code>conf/janusgraph-cql.properties</code></p> <pre><code>graph.set-vertex-id=true\n</code></pre>"},{"location":"JanusGraph/Trobleshoot/#disable-schema","title":"Disable Schema","text":""},{"location":"JanusGraph/indexing/","title":"Indexing","text":""},{"location":"JanusGraph/indexing/#indexing","title":"Indexing","text":"<p>Indices reduce latency on Gremlin graph queries, especially if the databases contain large data sets.</p> <p>Vertex-centric searches on indexed vertices show extremely low latency, and typically return within a few seconds even in the presence of large data sets. </p> <p>Composite indices should be defined ahead of time (prior to loading data) or a re-index should occur if you are defining the indices after loading data.</p> <p>The JanusGraph documentation recommends the use of the configuration property query.force-index to require the use of indexes in searches.</p> <p>In the absence of an index, JanusGraph will default to a full graph scan in order to retrieve the desired list of vertices. While this produces the correct result set, the graph scan can be very inefficient and lead to poor overall system performance in a production environment and in the worst case lead to system failure. </p>"},{"location":"JanusGraph/indexing/#procedure","title":"Procedure","text":"<ol> <li>Add the following properties to <code>janusgraph-1.0.0-rc1/conf/janusgraph-cql.properties</code></li> </ol> <pre><code>force-index=true\n</code></pre> <ol> <li>Then, follow the janusgraph documentation</li> </ol> <pre><code>graph.tx().rollback() //Never create new indexes while a transaction is active\nmgmt = graph.openManagement()\nname = mgmt.getPropertyKey('name')\nage = mgmt.getPropertyKey('age')\nmgmt.buildIndex('byNameComposite', Vertex.class).addKey(name).buildCompositeIndex()\nmgmt.buildIndex('byNameAndAgeComposite', Vertex.class).addKey(name).addKey(age).buildCompositeIndex()\nmgmt.commit()\n//Wait for the index to become available\nManagementSystem.awaitGraphIndexStatus(graph, 'byNameComposite').call()\nManagementSystem.awaitGraphIndexStatus(graph, 'byNameAndAgeComposite').call()\n//Reindex the existing data\nmgmt = graph.openManagement()\nmgmt.updateIndex(mgmt.getGraphIndex(\"byNameComposite\"), SchemaAction.REINDEX).get()\nmgmt.updateIndex(mgmt.getGraphIndex(\"byNameAndAgeComposite\"), SchemaAction.REINDEX).get()\nmgmt.commit()\n</code></pre> <ol> <li>To check/test, use <code>.profile()</code></li> </ol> <pre><code>gremlin&gt; g.V().hasLabel('user').has('name','Thirumal').elementMap().profile()\n==&gt;Traversal Metrics\nStep                                                               Count  Traversers       Time (ms)    % Dur\n=============================================================================================================\nJanusGraphStep([],[~label.eq(user), name.eq(Thi...                     1           1           5.427    47.58\n  constructGraphCentricQuery                                                                   1.543\n  GraphCentricQuery                                                                            8.695\n    \\_condition=(~label = user AND name = Thirumal)\n    \\_orders=[]\n    \\_isFitted=false\n    \\_isOrdered=true\n    \\_query=multiKSQ[1]\n    \\_index=byNameComposite\nElementMapStep                                                         1           1           5.979    52.42\n                                            &gt;TOTAL                     -           -          11.406        -\n</code></pre>"},{"location":"Java/Installation/","title":"Java JDK installation","text":""},{"location":"Java/Installation/#openjdk-installation-on-ubuntu-using-ppa","title":"OpenJdk Installation on Ubuntu using PPA","text":"<pre><code>sudo add-apt-repository ppa:openjdk-r/ppa\n\nsudo apt update\n\nsudo apt install openjdk-{version}-jdk\n</code></pre>"},{"location":"Java/Installation/#openjdk-installation-on-mac-osx","title":"OpenJdk installation on Mac OSX","text":"<p>Download the latest version of Java &amp; unzip.</p> <p>Move the unziped <code>directory</code> to <code>java virtual machine</code></p> <pre><code>sudo mv jdk-11.jdk /Library/Java/JavaVirtualMachines/\n</code></pre> <p>OR Copy </p> <pre><code>sudo tar xvzf openjdk-18_macos-aarch64_bin.tar.gz -C /Library/Java/JavaVirtualMachines\n</code></pre> <p>Check the version</p> <pre><code>java -version\n</code></pre>"},{"location":"Java/Installation/#openjdk-installation-on-ubuntu-by-downloading","title":"OpenJdk Installation on Ubuntu by downloading","text":"<p>Download the latest version of Java &amp; unzip.</p> <p>Move the unziped <code>directory</code> to <code>java virtual machine</code></p> <pre><code>sudo tar xfvz openjdk-11.0.1_linux-x64_bin.tar.gz --directory /usr/lib/jvm\n</code></pre>"},{"location":"Java/Installation/#change-the-default-version-of-java","title":"Change the default version of <code>Java</code>","text":"<p>Check the availavle version of jdk and select the desired version</p> <pre><code>sudo update-alternatives --config java\n</code></pre> <p>Then, enter the number you want to switch</p> <pre><code>[sudo] password for thirumal: \nThere are 2 choices for the alternative java (providing /usr/bin/java).\n\nSelection    Path                                         Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-14-openjdk-amd64/bin/java   1411      auto mode\n1            /usr/lib/jvm/java-14-openjdk-amd64/bin/java   1411      manual mode\n2            /usr/lib/jvm/jdk-15.0.1/bin/java              1         manual mode\n\nPress &lt;enter&gt; to keep the current choice[*], or type selection number: 2\n\n\nupdate-alternatives: using /usr/lib/jvm/jdk-15.0.1/bin/java to provide /usr/bin/java (java) in manual mode\n</code></pre> <p>Check the version</p> <pre><code>java -version\n</code></pre>"},{"location":"Java/Installation/#the-same-can-be-done-using-javac","title":"The same can be done using <code>Javac</code>","text":"<pre><code>sudo  update-alternatives --config javac\n</code></pre>"},{"location":"Java/Installation/#alternative","title":"Alternative","text":"<pre><code>sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-15.0.1/bin/java 1\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-15.0.1/bin/javac 1\n</code></pre>"},{"location":"Nginx/Add_TLS_For_Nginx_Hosted_Site/","title":"Add TLS For Nginx Hosted Site","text":""},{"location":"Nginx/Add_TLS_For_Nginx_Hosted_Site/#add-tls-for-nginx-hosted-website","title":"Add TLS for Nginx hosted website","text":"<ol> <li> <p>Set <code>Domain name</code> or <code>Hostname</code> name of the server using the following command.</p> <p><code>sudo hostnamectl set-hostname thirumal.org</code></p> </li> <li> <p>next, check the hostname by typing <code>hostname</code> in Terminal</p> </li> </ol> <p>suppose, if you get an error </p> <pre><code>sudo: unable to resolve host thirumal.org\n</code></pre> <p>then, edit the <code>/etc/hosts</code> directly to add the domain name.</p> <p>Proper way of setting name:-</p> <pre><code>127.0.0.1       localhost\n127.0.1.1       ubuntu\n127.0.0.1       thirumal.org\n# The following lines are desirable for IPv6 capable hosts\n::1     localhost ip6-localhost ip6-loopback\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n</code></pre> <ol> <li> <p>Install Nginx</p> <p><code>sudo apt install nginx</code></p> </li> <li> <p>Add <code>A Record</code>  in your <code>Website hosting</code> service provider  Gogaddy/AWS Route 53...</p> </li> <li> <p>Install &amp; enable <code>CERTBOT</code> use the steps defined in the https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx </p> </li> </ol>"},{"location":"Nginx/Add_TLS_For_Nginx_Hosted_Site/#to-forward-to-any-other-http-port","title":"To Forward to any other http Port","text":"<ol> <li> <p>Modify <code>default</code> site configuration of Nginx in <code>sites-enabled</code> i.e. <code>/etc/nginx/sites-enabled/default</code></p> </li> <li> <p>Add the <code>proxy_pass</code> and <code>proxy_set_header</code> in the location block of <code>listening port 443</code>, as shown below. </p> <p>server {         listen 443 ssl;         server_name thirumal.org;</p> <pre><code>    location / {\n        # Managed by Thirumal &amp; Commented the default properties\n        # try_files $uri $uri/ =404;   \n        proxy_pass http://127.0.0.1:8765; # managed by Thirumal\n        proxy_set_header Host $host; # managed by Thirumal\n    }\n\nssl_certificate /etc/letsencrypt/live/thirumal.org/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/thirumal.org/privkey.pem; # managed by Certbot\n</code></pre> <p>}</p> </li> <li> <p>Save the file and reload the Nginx configuration using the below command.</p> <p><code>sudo nginx -s reload</code> </p> </li> </ol>"},{"location":"Nginx/Host_Website_Using_Nginx/","title":"Host Website Using Nginx","text":""},{"location":"Nginx/Host_Website_Using_Nginx/#host-your-website","title":"Host your website","text":"<p>Default page is placed in <code>/var/www/html/</code> location. You can place your static pages here, or use virtual host and place it other location.</p>"},{"location":"Nginx/Host_Website_Using_Nginx/#virtual-host-is-a-method-of-hosting-multiple-domain-names-on-the-same-server","title":"Virtual host is a method of hosting multiple domain names on the same server.","text":"<p>Let\u2019s create simple HTML page in <code>/var/www/tutorial/</code> (it can be anything you want). Create index.html file in this location.</p> <pre><code>cd /var/www\nsudo mkdir tutorial\ncd tutorial\nsudo \"${EDITOR:-vi}\" index.html\n</code></pre> <p>Paste the following to the index.html file:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Hello, Nginx!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, Nginx!&lt;/h1&gt;\n    &lt;p&gt;We have just configured our Nginx web server on Ubuntu Server!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Restart/reload <code>Ngnix</code></p> <pre><code>sudo service nginx restart\n</code></pre> <p>Save this file &amp; go to browser and check it  </p>"},{"location":"Nginx/Set_Up_Virtual_Host/","title":"Set Up Virtual Host","text":""},{"location":"Nginx/Set_Up_Virtual_Host/#setting-up-virtual-host","title":"Setting up virtual host","text":"<p>To set up virtual host, we need to create file in <code>/etc/nginx/sites-enabled/</code> directory.</p> <p>For this tutorial, we will make our site available on 81 port, not the standard 80 port. You can change it if you would like to.</p> <pre><code>sudo \"${EDITOR:-vi}\" tutorial\n</code></pre> <p>paste the below content to <code>tutorial</code> file</p> <pre><code>server {\n   listen 81;\n   listen [::]:81;\n   server_name example.ubuntu.com;\n   root /var/www/tutorial;\n   index index.html;\n   location / {\n           try_files $uri $uri/ =404;\n   }\n}\n</code></pre> <p><code>root</code> is a directory where we have placed our .html file. <code>index</code> is used to specify file available when visiting root directory of site. <code>server_name</code> can be anything you want, because you aren\u2019t pointing it to any real domain by now.</p>"},{"location":"Nginx/Set_Up_Virtual_Host/#activating-virtual-host-and-testing-results","title":"Activating virtual host and testing results","text":"<pre><code>sudo service nginx restart\n</code></pre>"},{"location":"Nginx/Uninstall/","title":"Uninstall <code>NGINX</code> completely from Ubuntu","text":"<pre><code>sudo apt-get purge nginx nginx-common\nrm -rf /etc/nginx\nsudo apt-get autoremove\n</code></pre>"},{"location":"Nginx/installation_in_Ubuntu/","title":"Nginx (pronounced as \u201cEngine-X\u201d) is an open source web server that is often used as reverse proxy or HTTP cache.","text":""},{"location":"Nginx/installation_in_Ubuntu/#installing-nginx","title":"Installing Nginx","text":"<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p>Go to browser and enter http://localhost</p> <p> </p>"},{"location":"Nginx/installation_in_Ubuntu/#host-your-website","title":"Host your website","text":""},{"location":"Nginx/installation_in_Ubuntu/#set-up-virtual-host","title":"Set up Virtual host","text":""},{"location":"Nginx/installation_in_Ubuntu/#reverse-proxying","title":"Reverse Proxying","text":""},{"location":"Nginx/reverse_poxry_to_virtual_host/","title":"Reverse Proxy to Virtual host","text":""},{"location":"Nginx/reverse_poxry_to_virtual_host/#set-up-virtual-host","title":"Set up Virtual host","text":"<p>Modify <code>/etc/ngnix/ngnix.conf</code> file add the following/similar config inside <code>http</code></p> <pre><code>server {\n    listen 80;\n    server_name localhost;\n    location /tutorial {\n       # proxy_set_header X-Script-Name /tutorial;\n       # proxy_set_header Host $host;\n       # proxy_set_header X-Scheme $scheme;\n        proxy_pass http://127.0.0.1:81/;\n       # proxy_redirect off;\n    }\n}\n</code></pre>"},{"location":"Nginx/reverse_poxry_to_virtual_host/#note-if-you-are-trying-to-set-up-in-server-replace-localhost127001-with-your-static-ip-address","title":"Note: If you are trying to set up in server replace <code>localhost/127.0.0.1</code> with your <code>Static IP</code> address","text":"<p>### Multiple Reverse Proxy</p> <p>Modify <code>/etc/ngnix/ngnix.conf</code> file add the following/similar config inside <code>http</code></p> <pre><code>server {\n    listen 80;\n    server_name localhost;\n    location /pgadmin {\n        proxy_set_header X-Script-Name /pgadmin;\n        proxy_set_header Host $host;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://127.0.0.1:5050;\n        proxy_redirect off;\n    }\n    location /tutorial {\n       # proxy_set_header X-Script-Name /tutorial;\n       # proxy_set_header Host $host;\n       # proxy_set_header X-Scheme $scheme;\n        proxy_pass http://127.0.0.1:81/;\n       # proxy_redirect off;\n    }\n}\n</code></pre>"},{"location":"Nginx/reverse_proxy_with_symblink/","title":"Reverse Proxy with symbolic link","text":"<ol> <li> <p>Create a file in <code>/etc/nginx/sites-available</code></p> </li> <li> <p>Add the following content to the file</p> </li> </ol> <pre><code>server {\n    listen 80;\n    location / {\n        proxy_pass \"http://localhost:8080\";\n    }\n}\n</code></pre> <ol> <li> <p>Save the file</p> </li> <li> <p>Create symblink</p> <p><code>sudo ln -s /etc/nginx/sites-available/{file_name} /etc/nginx/sites-enabled/{file_name}</code></p> </li> <li> <p>Reload the nginx</p> <p><code>sudo service nginx restart</code></p> </li> </ol>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/","title":"Install PostgreSQL in Ubuntu","text":""},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#enable-postgresql-apt-repository","title":"Enable PostgreSQL Apt Repository","text":"<pre><code>sudo apt-get install wget ca-certificates\n\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\n\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" &gt;&gt; /etc/apt/sources.list.d/pgdg.list'\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#install-postgresql-on-ubuntu","title":"Install PostgreSQL on Ubuntu","text":"<pre><code>sudo apt-get update\n\nsudo apt-get install postgresql postgresql-contrib\n\nsudo  apt-get install postgresql-client\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#connect-to-postgresql","title":"Connect to PostgreSQL","text":"<pre><code>sudo -u postgres psql\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#alter-postgresql-password","title":"Alter PostgreSQL password","text":"<pre><code>ALTER USER postgres PASSWORD 'NEWPASSWORD';\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#access-postgresql-over-network","title":"Access PostgreSQL over network","text":""},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#change-listen_address-localhost-to-in-file-etcpostgresqlversion_numbermainpostgresqlconf","title":"Change listen_address <code>localhost to *</code> in  file  <code>/etc/postgresql/{version_number}/main/postgresql.conf</code>","text":"<pre><code># - Connection Settings -\nlisten_addresses = '*'      # what IP address(es) to listen on;     \n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#changes-in-pg_hbaconf","title":"Changes in <code>pg_hba.conf</code>","text":"<p>Add the following line in <code># IPv4 local connections</code>:</p> <pre><code>host   all             all          0.0.0.0/0                   md5\n</code></pre> <p>and comment</p> <pre><code>#host   all          all        127.0.0.1/32                     md5\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#restart-postgresql-to-take-effect","title":"Restart PostgreSQL to take effect","text":"<pre><code>sudo systemctl restart postgresql\n</code></pre> <p>We have configured everything required for remote host connection. Verify that the service is listening on port 5432. <pre><code>db1@1:~$ ss -tunelp | grep 5432\ntcp   LISTEN 0      244          0.0.0.0:5432      0.0.0.0:*    uid:113 ino:90438 sk:4 cgroup:/system.slice/system-postgresql.slice/postgresql@14-main.service &lt;-&gt;\ntcp   LISTEN 0      244             [::]:5432         [::]:*    uid:113 ino:90439 sk:6 cgroup:/system.slice/system-postgresql.slice/postgresql@14-main.service v6only:1 &lt;-&gt;\n</code></pre></p> <p>Allow the port through the firewall if you have ufw enabled.</p> <pre><code>sudo ufw allow 5432/tcp\n</code></pre> <p>Now use the syntax below to connect to your instance from a remote machine.</p> <pre><code>psql 'postgres://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db&gt;?sslmode=disable'\n</code></pre> <p>For example, I will try and connect to my instance with the superuser account created. Note that the remote machine should have PostgreSQL installed.</p> <pre><code>psql 'postgres://admin:Passw0rd@192.168.205.10:5432/postgres?sslmode=disable'\n</code></pre>"},{"location":"PostgreSQL/Install_PostgresQL_in_Ubuntu/#known-problem","title":"Known Problem","text":"<ul> <li>Check the permission problem in <code>/var</code> directory to create folder for <code>data</code> and <code>log</code>.</li> </ul>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/","title":"UnInstall PostgreSQL","text":""},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#how-to-remove-postgressql-on-ubuntu","title":"How to remove PostgresSQL on ubuntu","text":"<pre><code>sudo apt-get --purge remove postgresql\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#grep-for-all-postgresql-packages-in-debian-linux","title":"Grep for all PostgreSQL packages in Debian Linux","text":"<pre><code>dpkg -l | grep postgres\n\n--Add all the list in the below line\n\nsudo apt-get --purge remove {POSTGRESS-PACKAGE NAME}\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#delete-datalogconf-postgresql","title":"Delete <code>data/log/conf</code> postgresql","text":"<pre><code>sudo rm -rf {/var/{lib,log},etc}/postgresql/\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#directory-data-postgresql","title":"directory data postgresql","text":"<pre><code>sudo rm -rf /var/lib/postgresql\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#directory-log-postgresql","title":"directory log postgresql","text":"<pre><code>sudo rm -rf /var/log/postgresql/\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#directory-base-postgresql","title":"directory base postgresql","text":"<pre><code>sudo rm -rf /etc/postgresql/\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#delete-user","title":"Delete User","text":"<pre><code>sudo deluser postgres\n</code></pre>"},{"location":"PostgreSQL/UnInstall%20PostgreSQL/#delete-group","title":"Delete Group","text":"<pre><code>sudo delgroup postgres\n</code></pre>"},{"location":"PostgreSQL/WAL%20Archive%20%26%20PITR/","title":"WAL Archive & PITR","text":"<p>WAL is short for <code>Write-Ahead-Log</code>. Any change to the data is first recorded in a WAL file. The WAL files are mainly used by RDBMS as a way to achieve durability and consistency while writing data to storage systems.</p> <p>Before we move forward, let\u2019s first see why we need a WAL archiving and Point in Time Recovery (PITR). Consider if you have accidentally dropped some table(s) or deleted some data? How do you recover from such mistakes? WAL archiving and PITR is the answer to that. A WAL file can be replayed on a server to recreate the recorded changes on that server. Hence we can use the WALs to recover from such dangerous situations. Whereas the PITR is a way to stop the replay of WALs at the specified point and have a consistent snapshot of data at that time. i.e. just before the table is dropped or data is removed.</p>"},{"location":"PostgreSQL/WAL%20Archive%20%26%20PITR/#how-to-perform-wal-archiving","title":"How to Perform WAL Archiving","text":"<p>Normally, PostgreSQL databases keep the WAL files in the pg_wal directory of the <code>$PGDATA</code>. However, these WAL files may get recycled and can be deleted/overwritten by the server. So to avoid such scenarios, we keep a copy of WAL files in a separate directory other than $PGDATA. In order to do that, the PostgreSQL server provides us a way to copy the WAL file to a different location as soon as a WAL file is generated by the server. This way depends on three commands (options) namely <code>archive_mode, archive_command, and wal_level</code>. These options can be set in the <code>$PGDATA/postgresql.conf</code> configuration file. Archiving Options</p> <p>PostgreSQL server provides us with some options through which we can control the WAL archiving. Let\u2019s see what these options are and how to use them.</p> <pre><code>archive_mode signifies whether we want to enable the WAL archiving. It can accept the following values:\n    on \u2013 to enable the archiving\n    off \u2013 disable the archiving\n    always \u2013 normally this option is the same as \u2018on\u2019. This enables archiving for a standby server as well. If the standby shares the same path with another server, it may lead to WAL file corruption. So care must be taken in this case.\narchive_command specifies how to archive (copy) the WAL files and where. This option accepts the shell command or a shell script. Which is executed whenever there is a WAL file generated by the server to archive it. This option accepts the following placeholders:\n    %f \u2013 if present it\u2019s replaced with the filename of the WAL file.\n    %p \u2013 if present it is replaced with the pathname of the WAL file.\n    %% \u2013 is replaced with \u2018%\u2019\nwal_level is another important option. In PostgreSQL version 10+, it defaults to \u2018replica\u2019, prior to this version it was set to minimal by default. wal_level accepts the following values:\n    Minimal \u2013 adds only the information that is required for crash recovery or from immediate shutdown. It\u2019s not usable for replication or archiving purposes.\n    Replica \u2013 signifies that WAL will have enough information for WAL archiving and replication.\n    Logical \u2013 adds information required for logical replication.\n</code></pre> <p>an example of wal archive.</p> <pre><code>vim $PGDATA/postgresql.conf\narchive_mode = on\narchive_command = \u2018cp %p /path/to//archive_dir/%f\u2019\nwal_level = replica\n</code></pre>"},{"location":"PostgreSQL/WAL%20Archive%20%26%20PITR/#point-in-time-recovery","title":"Point In Time Recovery","text":"<p>In PostgreSQL, PITR is a way to stop the replay of WAL files at an appropriate point in time. There can be many WAL files in the archive but we may not want to replay all of them. Replaying all WALs will result in the same state where we had made some mistake. There are two important prerequisites required for PITR to work.</p> <ol> <li>Availability of a full base backup (usually taken with pg_basebackup)</li> <li>WAL files (WAL archive)</li> </ol> <p>In order to achieve the PITR, the first step would be to restore an earlier taken base backup and then create a recovery setup. The setup requires configuring restore_command and recovery_target options.</p> <ol> <li>restore_command specifies from where to look up the WAL files to replay on this server. This command accepts the same placeholders as archive_command.</li> <li>recovery_target_time This option tells the server when to stop the recovery or replay process. The process will stop as soon as the given timestamp is reached.</li> </ol> <p>recovery_target_inclusive This option controls whether to stop the replay of WALs just after the recovery_target_time is reached (if set to true) or just before (if set to false). an example of PITR recovery options.</p> <pre><code>vim $BACKUP/postgresql.con\nrestore_command = \u2018cp  /path/to//archive_dir/%f %p\u2019\nrecovery_target_time = \u2018\u2019\nrecovery_target_inclusive = false\n</code></pre>"},{"location":"TLS/let%27s_encrypt/","title":"Let's encrypt","text":""},{"location":"TLS/let%27s_encrypt/#generate-free-tlsssl-using-lets-encrypt","title":"Generate Free TLS/SSL using Let's Encrypt","text":"<ul> <li>Start Docker and pull <code>certbot</code> image</li> </ul> <pre><code>docker pull certbot/certbot\n</code></pre> <ul> <li>Run the below command to generate Certificate</li> </ul> <pre><code>docker run -it -v /Users/thirumal/certificate:/etc/letsencrypt certbot/certbot certonly --manual --preferred-challenges dns --email racetortoise@gmail.com --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d '*.example.com'\n</code></pre> <p>With specific certification key type <code>[rsa, ecdsa]</code></p> <pre><code>docker run -it -v /Users/thirumal/certificate:/etc/letsencrypt certbot/certbot certonly --manual --preferred-challenges dns --key-type rsa --email racetortoise@gmail.com --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d '*.example.com'\n</code></pre> <ul> <li> <p>After running the above command it will ask you to add TXT record to your DNS before pressing enter.</p> </li> <li> <p>Login to your Domain provider (Godaddy/AWS Route 53) to add DNS TXT records.</p> </li> </ul> <pre><code>Record name : _acme-challenge.example.com.\nRecort type : txt\nValue/Route Traffic ===&gt; IP address or another ...       : {displayed in the terminal}\n</code></pre> <p></p> <ul> <li> <p>Return to your Terminal and press <code>enter to validate and to generate the TLS</code></p> </li> <li> <p>It will generate few folders which similar to the image::img/folder_structure.png[folder_structure]</p> </li> <li> <p><code>PEM</code> files can be found in <code>archive\\website domain name\\</code></p> </li> </ul> <p></p>"},{"location":"TLS/let%27s_encrypt/#add-the-certificates-in-the-aws-certificate-manager","title":"Add the certificates in the AWS certificate manager","text":"<ul> <li>Create certificate manager in <code>N-Virginia</code> region</li> </ul> <ul> <li>Go to AWS Certificate Manager &gt; <code>Import a certificate</code></li> <li>Add the content of <code>cert.pem</code> to Certificate body. Use <code>cat cert.pem</code> in terminal to print the content of <code>pem</code> file</li> <li>Add the content of <code>privkey.pem</code> to Certificate private key</li> <li>Add the content of <code>chain.pem</code> to Certificate chain</li> </ul> <p>or</p> <p>Use AWS-CLI to import new certificate (Note: this will not work for renewal)</p> <pre><code>aws --region us-east-1 acm import-certificate --certificate \"file:///Users/thirumal/certificate/live/indsolv.com/cert.pem\" --private-key \"file:///Users/thirumal/certificate/live/indsolv.com/privkey.pem\" --certificate-chain \"file:///Users/thirumal/certificate/live/indsolv.com/fullchain.pem\" --profile enkindle_certificate_manager\n</code></pre> <p>To Re-Import, need to specify ceritificate arn</p> <pre><code>aws --region us-east-1 acm import-certificate --certificate \"file:///Users/thirumal/certificate/live/indsolv.com/cert.pem\" --private-key \"file:///Users/thirumal/certificate/live/indsolv.com/privkey.pem\" --certificate-chain \"file:///Users/thirumal/certificate/live/indsolv.com/fullchain.pem\" --certificate-arn arn:aws:acm:us-east-1:597991982472:certificate/6c1fe3b4-3ba7-4414-ba13-e4e446224aea --profile enkindle_certificate_manager\n</code></pre> <p>To Re-import from linux</p> <pre><code>aws --region us-east-1 acm import-certificate --certificate \"file:///etc/letsencrypt/certificate/live/insolvencysoftware.in/cert.pem\" --private-key \"file:///etc/letsencrypt/certificate/live/insolvencysoftware.in/privkey.pem\" --certificate-chain \"file:///etc/letsencrypt/certificate/live/insolvencysoftware.in/fullchain.pem\" --certificate-arn arn:aws:acm:us-east-1:597991982472:certificate/b4e34784-11fc-4c34-b75b-7135ac46c817 --profile enkindle_certificate_manager\n</code></pre>"},{"location":"TLS/let%27s_encrypt/#same-steps-for-renewal","title":"Same steps for Renewal","text":""},{"location":"VMware%20ESXi/Start%20VM%27s%20automatically%20during%20the%20boot/","title":"Start <code>VM's(Virtual Machines)</code> automatically during system (VMware ESXi) boot","text":"<ol> <li>After logging into the <code>vSphere client</code>, click the <code>IP/Hostnames for the ESXi Server</code> in the <code>inventory</code> list.      </li> <li>Then, select the <code>Configuration</code> tab.</li> <li>From there, click on <code>properties</code> and check the \"Allow automatic starting and stopping of virtual machines\".</li> <li>Finally, drag the VM to be started automatically into the <code>Automated Start</code> pane. This will activate the autostart feature.</li> <li>Adittionally you can set the delay time for each <code>VMs</code>, if there is any dependencies    </li> </ol>"},{"location":"apache-zookeeper/installation/","title":"installation","text":"<ol> <li> <p>Download latest version of Zookeeper</p> </li> <li> <p>Rename <code>zoo_sample.cfg</code> to <code>zoo.cfg</code> and give the path to store session data</p> </li> <li> <p>Start the zoo keeper using</p> <pre><code>./zkServer.sh start\n</code></pre> </li> <li> <p>Then run this project with <code>ZooKeeper</code> IP - Address</p> </li> <li> <p>UI - (JSON) can be accessible in browser using URL (http://localhost:8080/commands/stat)[http://localhost:8080/commands/stat]</p> </li> </ol>"},{"location":"aws/host_static_website_using_s3/","title":"Host static website using S3","text":"<ol> <li> <p>Create two S3 bucket with your domain name <code>(www and non-www)</code></p> <ol> <li>example.com  </li> <li>www.example.com</li> </ol> </li> <li> <p>Configure <code>non-www</code> bucket to redirect to <code>www</code> bucket</p> </li> </ol> <p></p> <ol> <li> <p>Upload your web content to www bucket</p> </li> <li> <p>Configure www bucket for web-hosting by selecting <code>static website hosting</code></p> </li> </ol> <p></p> <ol> <li>Make www bucket as <code>public</code> and add the below <code>policy</code></li> </ol> <p><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicReadGetObject\",\n            \"Effect\":\"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::www.example.com/*\"\n        }\n    ]\n}\n</code></pre> </p> <p></p> <ol> <li> <p>Create AWS route53 public hosted zone with the same name as the domain name (Non-WWW).</p> </li> <li> <p>Update GoDaddy NS with AWS provided NS (without ending dot(.).</p> </li> </ol> <p></p> <ol> <li> <p>In AWS Route53 </p> <p>create <code>A Type</code>  recordset for the <code>non-www</code> domain and select </p> <ol> <li>Alias to S3 website endpoint, </li> <li>Select the region of your bucket</li> <li>Select your <code>S3 main bucket</code> (i.e non-www domain)</li> </ol> <p>create <code>A Type</code> recordset for <code>www</code> subdomain and repeat the above steps/points except the selecting S3 <code>www</code> bucket.</p> </li> </ol> <p></p> <ol> <li>Access your web site from browser. Enjoy</li> </ol>"},{"location":"aws/EC2/connect_to_ec2/","title":"Connect to ec2","text":""},{"location":"aws/EC2/connect_to_ec2/#prerequisite","title":"Prerequisite","text":"<ol> <li>.pem file</li> </ol>"},{"location":"aws/EC2/connect_to_ec2/#login","title":"Login","text":"<ol> <li> <p>Give permission for <code>.pem</code> file</p> <pre><code>chmod 600\n</code></pre> </li> <li> <p><code>Login</code> to <code>EC2</code></p> <pre><code>ssh -i {.pem} ubuntu@{ip-dns}\n</code></pre> </li> <li> <p>Copy files from local system to <code>ec2</code></p> <pre><code>scp -i {.pem} /user/thirumal/file_to_copy.pdf ubuntu@{ip}:/home/ubuntu\n</code></pre> </li> </ol>"},{"location":"aws/S3/AWS-Cli%20in%20Ubuntu%20%26%20Mac/","title":"Install AWS CLi","text":"<pre><code>    sudo apt install awscli\n</code></pre>"},{"location":"aws/S3/AWS-Cli%20in%20Ubuntu%20%26%20Mac/#set-up-user-config-in-ubuntumac-os","title":"Set Up User config in Ubuntu/Mac OS","text":"<ol> <li>Create IAM user &amp; have it ready <code>Access and Secrete key</code></li> <li> <p>Create <code>.aws</code> folder in your home directory</p> <pre><code>cd /home/thirumal\n\nmkdir .aws\n</code></pre> </li> <li> <p>Create <code>credentials</code> file in <code>.aws</code> folder</p> <pre><code>vi credentials\n</code></pre> </li> <li> <p>Add the user name inside <code>[]</code> and mention default user as <code>[default]</code>.</p> <pre><code>[default]\naws_access_key_id=\naws_secret_access_key=\nregion=ca-central-1\n[Thirumal]\naws_access_key_id=\naws_secret_access_key=\nregion=us-east-1\n[Jessica]\naws_access_key_id=\naws_secret_access_key=\nregion=ap-south-1\n</code></pre> </li> <li> <p>Usage of multiple profile.</p> <pre><code>aws syc s3://{bucketname}/{folderName}\n</code></pre> </li> </ol>"},{"location":"aws/S3/commands/","title":"Commands","text":""},{"location":"aws/S3/commands/#to-set-up-aws-cli-check-set-up-aws-cli-in-ubuntumac","title":"To set up aws cli check Set up aws cli in Ubuntu/Mac","text":""},{"location":"aws/S3/commands/#list-buckets","title":"List buckets","text":"<pre><code>aws s3 ls\n</code></pre>"},{"location":"aws/S3/commands/#copy-local-file-from-local-to-s3","title":"Copy Local file from <code>Local</code> to <code>S3</code>","text":"<pre><code>aws s3 cp {fileName} s3://{bucketname}/{folderName}\n</code></pre>"},{"location":"aws/S3/commands/#copy-multiple-files-from-local-system-to-aws-s3-bucket","title":"Copy multiple files from <code>Local</code> System to <code>AWS S3</code> bucket","text":"<pre><code>aws s3 cp {loacl_path} s3://{bucketName}/{folderName} --recursive\n</code></pre>"},{"location":"aws/S3/commands/#download-object-from-s3-to-local-system","title":"Download object from <code>S3</code> to local system","text":"<pre><code>aws s3 cp s3://{bucketNamw}/{folderName} /home/thirumal/Downloads\n</code></pre> <p>--Download multiple files</p> <pre><code>aws s3 cp s3://{bucketName}/{folderName} /home/thirumal/Downloads/ --recursive\n</code></pre>"},{"location":"aws/S3/commands/#use-double-quotes-if-there-is-any-space-in-directory-file-name","title":"Use double quotes, if there is any space in directory / file name","text":"<pre><code> aws s3 cp {fileName} \"s3://{bucketname}/{folderName}\"\n</code></pre>"},{"location":"aws/S3/cross_account_S3_copy/","title":"Copy S3 objects from one account to another account S3 bucket","text":"<ol> <li>Create the buckets or get the bucket names from source and destination account.</li> <li> <p>Attach the following policy to source bucket.</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"DelegateS3Access\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::DESTINATION_BUCKET_ACCOUNT_NUMBER:user/thirumal\"\n            },\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::SOURCE_BUCKET_NAME/*\",\n                \"arn:aws:s3:::SOURCE_BUCKET_NAME\"\n            ]\n        }\n    ]\n}\n</code></pre> </li> <li> <p>Create <code>IAM</code> user in the destination account with the following <code>policy</code>.</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::SOURCE_BUCKET_NAME\",\n                \"arn:aws:s3:::SOURCE_BUCKET_NAME/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::DESTINATION_BUCKET_NAME\",\n                \"arn:aws:s3:::DESTINATION_BUCKET_NAME/*\"\n            ]\n        }\n    ]\n}\n</code></pre> </li> <li> <p>Run the following command with destination <code>IAM</code> user in the local machine.</p> <pre><code>aws sync s3://sourceBucket/folder_name s3://destinationBucket/folder_name\n</code></pre> </li> </ol>"},{"location":"aws/codecommit/migrateLocalRepo/","title":"migrateLocalRepo","text":""},{"location":"aws/codecommit/migrateLocalRepo/#migrating-local-repository-to-aws-code-commit","title":"Migrating Local Repository to AWS Code Commit","text":""},{"location":"aws/codecommit/migrateLocalRepo/#instructions","title":"Instructions","text":"<p>Initialize your sample app as a git repository:</p> <pre><code>    $ git init .\n</code></pre> <p>Commit your existing files:</p> <pre><code>$ git add -A .\n$ git commit -m \"Initial commit\"\n</code></pre> <p>Copy the value for the SourceRepoURL and configure a new git remote named codecommit. Be sure to use your value of the SourceRepoURL:</p> <pre><code>$ git remote add codecommit https://git-codecommit.us-west-2.amazonaws.com/v1/repos/mytodo\n</code></pre> <p>Configure the CodeCommit credential helper. Append these lines to the end of your .git/config file:</p> <pre><code>[credential]\n    helper =\n    helper = !aws codecommit credential-helper $@\n    UseHttpPath = true\n</code></pre>"},{"location":"aws/codecommit/migrateLocalRepo/#verification","title":"Verification","text":"<p>Verify you have a codecommit remote:</p> <pre><code>$ git remote -v\ncodecommit  https://git-codecommit.us-west-2.amazonaws.com/v1/repos/mytodo (fetch)\ncodecommit  https://git-codecommit.us-west-2.amazonaws.com/v1/repos/mytodo (push)\n</code></pre> <p>Verify the credential helper is installed correctly. Mac users may see an osxkeychain entry as the first line of output. This is expected, you just need to verify the last two lines match the output below:</p> <pre><code>$ git config -l | grep helper\ncredential.helper=osxkeychain\ncredential.helper=\ncredential.helper=!aws codecommit credential-helper $@\n</code></pre> <p>Verify you can fetch from the codecommit remote:</p> <pre><code>$ git fetch codecommit\n$ echo $?\n0\n</code></pre>"},{"location":"aws/codecommit/migrateLocalRepo/#pushing-your-changes-to-aws-codecommit","title":"Pushing your changes to AWS CodeCommit","text":"<p>Now we have our pipeline and git remote configured, anytime we push changes to our codecommit remote, our pipeline will automatically deploy our app. Instructions</p> <p>Push your changes to the codecommit remote:</p> <pre><code>$ git push codecommit master\nCounting objects: 23, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (18/18), done.\nWriting objects: 100% (23/23), 9.82 KiB | 3.27 MiB/s, done.\nTotal 23 (delta 2), reused 0 (delta 0)\nTo https://git-codecommit.us-west-2.amazonaws.com/v1/repos/mytodo\n * [new branch]      master -&gt; master\n</code></pre>"},{"location":"aws/codecommit/migrateLocalRepo/#verification_1","title":"Verification","text":"<p>The best way to verify the pipeline is working as expected is to view the pipeline in the console:</p>"},{"location":"aws/tls/create_cloud_front/","title":"Set up Cloud Front for S3 static web site","text":""},{"location":"aws/tls/create_cloud_front/#steps","title":"Steps","text":"<ol> <li> <p>Generate TLS &amp; add the certificate to <code>Certificate Manager</code>. Refer Let's Encrypt doc</p> </li> <li> <p>Go to Cloud Front and select <code>Create distribution</code> and again select <code>Get Started</code> under <code>Web</code>.</p> </li> <li> <p>Copy the end point from <code>www domain name</code> S3 bucket (Caution: Don't select the auto-select option) and add to <code>Origin Domain name</code></p> </li> </ol> <p></p> <ol> <li> <p>In <code>Default Cache Behavior Settings</code> -&gt; <code>Viewer Protocol policy</code>  select <code>Redirect HTTP to HTTPS</code></p> </li> <li> <p>In <code>Distribution Settings</code> add <code>Alternate Domain Names (CNAMEs)</code> </p> <p><code>www.example.com</code> 6. In <code>SSL Certificate</code> select <code>Custom SSL Certificate (example.com)</code> and select the <code>imported certificate</code> from the <code>Certificate Manager</code></p> </li> </ol> <p> </p> <ol> <li>Leave everything with default configuration &amp; create</li> </ol>"},{"location":"aws/tls/create_cloud_front/#point-domain-to-cloudfront","title":"Point Domain to CloudFront","text":"<ol> <li>Copy the <code>Domain Name</code> that is displayed in the row after create</li> </ol> <ol> <li>Add that as <code>CNAME</code> in <code>Route53</code></li> </ol> <p>Expected error <code>Key is not found</code> will be in the origin path (Clear)</p>"},{"location":"aws/vpc/Key%20component%20of%20VPC/","title":"Key component of VPC","text":""},{"location":"aws/vpc/Key%20component%20of%20VPC/#key-component-of-vpc","title":"Key component of VPC","text":"<ol> <li> <p>Internet Gateway &amp; NAT: It logically enables routing of traffic in the public Network</p> </li> <li> <p>DNS: Standard which resolve names used over the internet in to IP address.</p> </li> <li> <p>Elastic IP: It's a static IP which never changes (supports only IPv4)</p> </li> <li> <p>VPC Endpoints: Private connection between VPC &amp; other AWS services without using internet</p> </li> <li> <p>Network Interface: A point of connection between public and private network.</p> </li> <li> <p>Egress only IG: Allow only outbound communication from EC2 over IPv6.</p> </li> <li> <p>Route Tables: Defines how traffic is routed between each subnet.</p> </li> <li> <p>VPC peering: Connection between VPCs.</p> </li> </ol>"},{"location":"aws/vpc/NAT/","title":"NAT","text":""},{"location":"aws/vpc/NAT/#network-address-translation","title":"Network Address Translation","text":"<ul> <li> <p>NAT device enable instances in the private subnet to access the internet or other resources but prevent the internet from initiating connections to the instance </p> </li> <li> <p>Need to create in the public subnet</p> </li> </ul>"},{"location":"aws/vpc/subnet/","title":"Subnet","text":""},{"location":"aws/vpc/subnet/#subnet","title":"Subnet","text":""},{"location":"aws/vpc/subnet/#what-is-subnet","title":"What is subnet?","text":"<p>A subnet is a logical subdivision of large network.</p> <p>IP address with common prefix are in the same subnet</p> <p></p>"},{"location":"aws/vpc/subnet/#types-of-subnet","title":"Types of subnet:","text":"<ol> <li> <p>private subnet</p> <ol> <li> <p>Resources are not exposed to the outside world</p> </li> <li> <p>They make use of only private IP</p> </li> <li> <p>Mainly used for backend application</p> </li> </ol> </li> <li> <p>public subnet</p> <ol> <li> <p>Resources are exposed to the internet through internet gateway</p> </li> <li> <p>They make use of both private  and public IPs</p> </li> <li> <p>Mainly used for external facing application UI/Web server</p> </li> </ol> </li> </ol>"},{"location":"aws/vpc/vpc/","title":"Vpc","text":""},{"location":"aws/vpc/vpc/#vpc-virtual-private-cloud","title":"VPC - Virtual Private cloud","text":"<ol> <li> <p>Logically isolated section of AWS Cloud.</p> </li> <li> <p>Can be applied to all the region/zone</p> </li> <li> <p>Subnet, NAT, security group, internet gateway, etc are the part of VPC</p> </li> </ol>"},{"location":"aws/vpc/vpc/#why-its-required","title":"Why it's required?","text":"<ol> <li> <p>privacy</p> </li> <li> <p>Security</p> </li> <li> <p>Prevention from loss of proprietary data</p> </li> </ol>"},{"location":"aws/vpc/vpc/#what-is-an-ip-address","title":"What is an IP address?","text":"<p>An IP address is a logical, numerical label assigned as a unique entity to each device in a network to locate the host/system through the network ID &amp; Host ID present in the IP address</p>"},{"location":"aws/vpc/vpc/#what-is-cidr","title":"What is CIDR?","text":"<p>Classless Inter-Domain routing reduces the wastage of IP addresses by extra required number of IP address to the users. It represents the IP address along with special number (/n) to specify the number of bits present in the network ID.</p> <pre><code>172.19.0.0/16\n\n1010 1100 001 111/ 0000 0000 0000  0000\n\nNetwork ID      /  Host ID\n</code></pre>"},{"location":"cmis/cmis%20workbench/","title":"Cmis workbench","text":"<ol> <li> <p>Download \"CMIS Workbench\" &amp; open by running</p> <pre><code>cd ~/cmis_folder/\n\n./workbench.sh\n</code></pre> </li> <li> <p>Add the following details for the connections</p> <pre><code>* http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.1/browser\n* User Name\n* Password\n* Select `Browser` inn `Binding`\n* Click `Load Repositories`\n</code></pre> <p></p> </li> <li> <p>It will load <code>-default</code> repository, then click login</p> <p></p> </li> </ol>"},{"location":"docker/build_image/","title":"Build Docker image","text":"<pre><code>docker build -t {tag name} -f {DockerFile} {location_of_DockerFile}\ndocker build -t sample -f DockerFile .\n</code></pre>"},{"location":"docker/build_image/#copy-files-from-localhost-while-build","title":"Copy Files from local/host while build","text":"<pre><code>FROM ubuntu\nRUN apt install nginx\nCOPY /home/thirumal/git/html /var/www/html\n\n-----Build Now-------\ndocker build -t custom_ngnix -f DockerFile .\n</code></pre>"},{"location":"docker/build_image/#copyadd-files-from-internet","title":"Copy/Add files from INTERNET","text":"<pre><code>FROM ubuntu\nRUN apt install nginx\nADD https:github.com/M-thirumal/abc.zip /var/www/html/abc.zip\nRUN cd /var/www/html &amp;&amp; unzip abc.zip &amp;&amp; mv abc/* /var/www/html/\nCMD nginxctl -DFOREGROUND\n\n-----Build Now-------\ndocker build -t custom_ngnix -f DockerFile .\n</code></pre>"},{"location":"docker/build_image/#environment-variable","title":"Environment variable","text":"<pre><code>ENV\n</code></pre>"},{"location":"docker/build_image/#working-directory","title":"Working Directory","text":"<pre><code>FROM ubuntu\nRUN apt install nginx\nWORKDIR /var/www/html\nADD https:github.com/M-thirumal/abc.zip ./abc.zip\n\nRUN unzip abc.zip &amp;&amp; mv abc/* .\nCMD nginxctl -DFOREGROUND\n\n-----Build Now-------\ndocker build -t custom_ngnix -f DockerFile .\n</code></pre>"},{"location":"docker/build_image/#metadata","title":"Metadata","text":"<p><code>Label</code> can be used to specify metadata</p> <pre><code>FROM ubuntu\nRUN apt install nginx\nLABEL Maintainer=Thirumal\nLABEL Vendor=ABC\n</code></pre>"},{"location":"docker/build_image/#argument","title":"Argument","text":"<p><code>ARG</code> can be used as a build time argument</p> <pre><code>FROM ubuntu\nARG software=nginx\nRUN apt install $software\n\n------------\ndocker build -t custom_ngnix -f DockerFile --build-arg software = vlc .\n</code></pre> <p>More than one argument</p> <pre><code>FROM ubuntu\nARG software=nginx\nARG user\n# Add NEW user from argument\nRUN adduser $user\n# Switch to the NEW user\nUSER $user\nRUN apt install $software\n\n------------\ndocker build -t custom_ngnix -f DockerFile --build-arg software = vlc .\n</code></pre>"},{"location":"docker/commands/","title":"Commands","text":""},{"location":"docker/commands/#images","title":"Images","text":""},{"location":"docker/commands/#list-images","title":"List images","text":"<pre><code>docker images\n</code></pre>"},{"location":"docker/commands/#remove-images","title":"Remove images","text":"<pre><code>docker rmi {image_name/id}\n\ndocker rmi -f {image_name/id}\n</code></pre>"},{"location":"docker/commands/#remove-dangling-none-images","title":"Remove dangling (none) images","text":"<pre><code>docker rmi $(docker images -f \"dangling=true\" -q)\n</code></pre>"},{"location":"docker/commands/#container","title":"Container","text":""},{"location":"docker/commands/#create-container","title":"Create container","text":"<pre><code>docker run -d {image:tag}\n\n-d =&gt; stands for de-attach mode\n</code></pre>"},{"location":"docker/commands/#re-name","title":"Re-Name","text":"<pre><code>docker rename {current_container_name} {new_container_name}\n</code></pre>"},{"location":"docker/commands/#list-containers","title":"List containers","text":"<pre><code>docker ps -l\n\ndocker ps -a\n</code></pre>"},{"location":"docker/commands/#remove-container","title":"Remove container","text":"<pre><code>docker rm {Container Id}\n\nUse force `-f` To remove running container\n\ndocker rm -f {container_id}\n</code></pre>"},{"location":"docker/commands/#start-contaier","title":"Start contaier","text":"<pre><code>docker start {}\n</code></pre>"},{"location":"docker/commands/#name-the-container","title":"Name the container","text":"<pre><code>docker run -d --name {container name} -p 80:80 nginx\n</code></pre>"},{"location":"docker/commands/#run-container-restart-always","title":"Run container (restart always)","text":"<pre><code>docker run --restart always --detach --name auto-start-redis redis\n</code></pre>"},{"location":"docker/commands/#expose-port","title":"Expose Port","text":"<p>To expose port use <code>-p-</code></p> <pre><code>docker run -d -p {host_os_port}:{docker_port} {image:tag}\ndocker run -d -p 9090:80 nginx:alpine\n</code></pre>"},{"location":"docker/commands/#statistics-of-container-cpuram","title":"Statistics of container (CPU/RAM/...)","text":"<pre><code>docker stats {container_id}\n</code></pre>"},{"location":"docker/commands/#limit-the-memory-usage-of-container","title":"Limit the memory usage of container","text":"<pre><code>docker run -d --name {container_name} --memory \"200mb\" nginx:alpine\n</code></pre>"},{"location":"docker/commands/#limit-the-cpu-usage","title":"Limit the CPU usage","text":"<pre><code>[0,3] - means use oly 0 and 3. [0-3] means use 0 to 3\n\ndocker run -d --name {container_image} --memory \"200mb\" --cpuset-cpus 0-3 ngnix:alpine\n</code></pre>"},{"location":"docker/commands/#create-image-from-the-container","title":"Create image from the container","text":"<pre><code>docker commit {container_id} {imageName}:{tag_name}\n</code></pre>"},{"location":"docker/commands/#temporary-container","title":"Temporary container","text":"<pre><code>Once exit from bash container will get destroy.\n\ndocker run --rm -ti ubuntu bash\n</code></pre>"},{"location":"docker/commands/#inspect-container","title":"Inspect container","text":"<pre><code>docker inspect {container_id}\n</code></pre>"},{"location":"docker/commands/#run","title":"RUN","text":"<p>Use to install application</p> <pre><code>FROM ubuntu\nRUN apt-get install git\n</code></pre>"},{"location":"docker/commands/#cmd","title":"CMD","text":"<p>Command to execute</p> <pre><code>From ubuntu\nRUN apt-get install nginx\nngnixctl -DFOREGROUND\n</code></pre> <p>The process must be <code>foregroud</code>, otherwise the docker will exit. If there is no <code>foreground</code> process then use the following command <code>ti</code> (terminal) to keep alive for debug</p> <pre><code>docker run -d -ti --name {Container_name} -p {PORT:PORT} {image}\n</code></pre>"},{"location":"docker/commands/#loginaccess-container","title":"Login/Access Container","text":"<pre><code>docker exec -ti {containerName} bash\n</code></pre>"},{"location":"docker/commands/#copy-files-from-host-to-docker-container","title":"Copy files from host to docker container","text":"<pre><code>docker cp {filename} {container_name}:/{destination}\n\ndocker cp thirumal.txt nginx1:/var/www/\n</code></pre>"},{"location":"docker/commands/#copy-files-from-docker-container-to-host","title":"Copy files from docker container to host","text":"<pre><code>docker cp {container_name}:/{source path}  /{destination}\n\ndocker cp nginx1:/var/www/thirumal.txt .\n</code></pre>"},{"location":"docker/context/","title":"From where the docker image getting build","text":"<p>If the given DockerFile directory contains any files /folder it will also get added to the image</p>"},{"location":"docker/context/#how-to-avoid","title":"How to avoid?","text":"<p>Use <code>.dockerignore</code> file to add all un-neccessary files/folders. This works exactly same as <code>.gitignore</code></p>"},{"location":"docker/context/#dangling-images","title":"Dangling images","text":"<p>Dockers are read-only, that means when you create a image with same name, previous version of image will become <code>&lt;none&gt;</code></p>"},{"location":"docker/context/#list-all-dangling-images","title":"List all dangling images","text":"<pre><code>docker images -f dangling=true -q\n</code></pre>"},{"location":"docker/context/#delete-all-dangling-images","title":"Delete all dangling images","text":"<pre><code>docker rmi $(docker images -f dangling=true -q)\n</code></pre>"},{"location":"docker/context/#multi-stage-image","title":"Multi-Stage image","text":"<p>To reduce the size of images</p> <pre><code>FROM maven:3.6-alpine as builder\n\nCOPY java-repo /java-repo\n\nWORKDIR /java-repo\n\nRUN maven package\n\nFROM openjdk:11-alpine\n\nCOPY --from=builder /java-repo/target/java-repo-1.0-SNAPSHOT.jar /java-repo.jar\n\nCMD java -jar /java-repo.jar\n</code></pre> <p>In the above <code>DockerFile</code>, <code>Maven</code> image is dicarded and used only <code>JDK-alpine</code> to build the image</p>"},{"location":"docker/docker%20ignore%20file/","title":"Docker ignore file","text":"<p>Docker ignore <code>.dockerignore</code> can be used to ignore the unneccessary files while building the docker images</p> <pre><code>`vi .dockerignore`\n</code></pre> <p>Add all the folders &amp; files that you would like to ignore, just like <code>.gitignore</code></p>"},{"location":"docker/docker_ui_Portainer/","title":"docker ui Portainer","text":""},{"location":"docker/docker_ui_Portainer/#gui-for-docker-to-connect-to-local-and-remote","title":"GUI for Docker to connect to local and remote","text":""},{"location":"docker/docker_ui_Portainer/#docker-image","title":"Docker image","text":"<pre><code>docker pull portainer/portainer\n</code></pre>"},{"location":"docker/docker_ui_Portainer/#create-directory-for-data","title":"Create directory for data","text":"<pre><code>mkdir /opt/portainer /data\n</code></pre>"},{"location":"docker/docker_ui_Portainer/#run-the-docker-image","title":"Run the docker image","text":"<pre><code>docker run -d -p 9000:9000 --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data portainer/portainer\n</code></pre>"},{"location":"docker/docker_ui_Portainer/#check-the-image-and-container","title":"Check the image and container","text":"<pre><code>docker images\ndocker ps\n</code></pre>"},{"location":"docker/docker_ui_Portainer/#access-it-in-browser","title":"Access it in browser","text":"<p>http://localhost:9000</p>"},{"location":"docker/installtion_configuration/","title":"Installtion configuration","text":""},{"location":"docker/installtion_configuration/#installation","title":"Installation","text":"<pre><code>sudo apt install docker-ce docker-ce-cli containerd.io\nsudo apt install docker.io\n</code></pre>"},{"location":"docker/installtion_configuration/#enable-auto-start","title":"Enable Auto start","text":"<pre><code>sudo systemctl enable docker\n</code></pre>"},{"location":"docker/installtion_configuration/#add-user-into-docker-group","title":"Add user into docker group","text":"<pre><code>sudo usermod -aG docker thirumal\n---Requires logout &amp; login or restart\n</code></pre>"},{"location":"docker/installtion_configuration/#logs","title":"Logs","text":"<pre><code>docker logs {container name/id\n</code></pre>"},{"location":"docker/installtion_configuration/#move-docker-foldersimages-to-custom-location","title":"Move docker folders/images to custom location","text":"<p>Open <code>sudo vi /lib/systemd/system/docker.service</code> and add the below argument to <code>ExecStart</code></p> <pre><code>--data-root /opt/docker\n</code></pre> <p>And move docker folder</p> <pre><code>`mv /var/lib/docker /opt`\n</code></pre>"},{"location":"docker/network/","title":"Types of Network","text":"<ul> <li>Bridge Network - <code>default network</code></li> <li>Host Network</li> <li>None Network</li> </ul>"},{"location":"docker/network/#list-docker-network","title":"List Docker network","text":"<pre><code>docker network ls\n</code></pre>"},{"location":"docker/network/#run-docker-with-host-network","title":"Run docker with host network","text":"<pre><code>docker --net=host\n</code></pre>"},{"location":"docker/network/#inspecting-a-docker-network","title":"Inspecting a Docker network","text":"<pre><code>docker network inspect networkname\n\ndocker network inspect bridge\n</code></pre>"},{"location":"docker/persistent_data%26volume/","title":"Persist the docker data","text":"<p>-v =&gt; stands for volume to map docker and host directory</p>"},{"location":"docker/persistent_data%26volume/#bind-host-directory-with-docker-directory","title":"Bind Host directory with docker directory","text":"<pre><code>sudo docker run --name pgadmin -p 80:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre>"},{"location":"docker/persistent_data%26volume/#default-container-volume","title":"Default Container volume","text":"<p>By default, when a container gets create, it also creates a volume/folder in <code>/var/lib/docker/volumes</code> and that will get delete when the container removed.</p> <p>To keep the data persistant, (Create/Bind Volume)</p>"},{"location":"docker/persistent_data%26volume/#create-volume","title":"Create VOLUME","text":"<p>The volume/directory  will be created under <code>/var/lib/docker/volumes</code></p> <pre><code>docker volume create postgresql_volume\n</code></pre>"},{"location":"docker/persistent_data%26volume/#list-volumes","title":"List volumes","text":"<pre><code>docker volume ls\n</code></pre>"},{"location":"docker/persistent_data%26volume/#map-volume","title":"Map volume","text":"<pre><code>docker run -d -v postgresql_volume:/var/lib/postgres --name postgres -p 5432:5432 postgres:latest\n</code></pre>"},{"location":"docker/persistent_data%26volume/#delete-the-container-and-volume","title":"Delete the container and volume","text":"<pre><code>docker rm -fv {container_id}\n</code></pre>"},{"location":"docker/persistent_data%26volume/#dangling-volume","title":"Dangling volume","text":"<p>The volume which are create with container but not deleted.</p> <p>To remove all dangling volume</p> <pre><code>docker volume rm $(docker volume ls -f=dangling=true -q)\n</code></pre>"},{"location":"docker/spring-boot/","title":"Create docker and run the image","text":""},{"location":"docker/spring-boot/#create-jar","title":"Create JAR","text":""},{"location":"docker/spring-boot/#create-docker-image","title":"Create docker image","text":"<p>Go to the project location and enter the below command</p> <pre><code>docker build --tag {image_name}:1.0 .\ndocker build --tag icms:1.0 .\n</code></pre>"},{"location":"docker/spring-boot/#run-your-image-as-a-container","title":"Run your image as a container","text":"<ol> <li> <p>Run the following command to start a container based on your new image:</p> <p>docker run --publish 8000:8080 --detach --name icms icms:1.0</p> </li> </ol> <p>Externalizing log</p> <pre><code>   docker run -p 8080:8080 -d --name icms -v /var/lib/docker/volume/icms/logs:/logs icms:1.0\n</code></pre> <p>There are a couple of common flags here:</p> <p><code>--publish</code> asks Docker to forward traffic incoming on the host\u2019s port 8000 to the container\u2019s port 8080. Containers have their own private set of ports, so if you want to reach one from the network, you have to forward traffic to it in this way. Otherwise, firewall rules will prevent all network traffic from reaching your container, as a default security posture.</p> <p><code>--detach</code> asks Docker to run this container in the background.</p> <p><code>--name</code> specifies a name with which you can refer to your container in subsequent commands, in this case bb.</p> <ol> <li> <p>Visit your application in a browser at <code>localhost:8000</code>. You should see your <code>icms</code> application up and running. At this step, you would normally do everything you could to ensure your container works the way you expected; now would be the time to run unit tests, for example.</p> </li> <li> <p>Once you\u2019re satisfied that your bulletin board container works correctly, you can delete it:</p> <p>docker rm --force bb</p> </li> </ol> <p>The <code>--force</code> option stops a running container, so it can be removed. If you stop the container running with docker stop <code>icms</code> first, then you do not need to use <code>--force</code> to remove it.</p>"},{"location":"docker/spring-boot/#another-way-of-building-images-from-23","title":"Another Way of building images (FROM 2.3)","text":"<pre><code>./mvnw spring-boot:build-image\n./gradlew bootBuildImage\n</code></pre>"},{"location":"encrypt/encrypt/","title":"Encrypt","text":"<ol> <li>Generating the encrypted value:</li> </ol> <p>Download and extract from http://www.jasypt.org/download.html</p> <p>Run the below from the bin of the extracted download:</p> <pre><code>WINDOWS :- encrypt.bat input=\"testuser\" password=MY_PASS\nLINUX    :- ./encrypt.sh input=\"postgres\" password=INDsolv\n</code></pre> <ol> <li> <p>Added dependency to the project:</p> <p> com.github.ulisesbocchio jasypt-spring-boot-starter 1.14 </p> </li> <li> <p>Using encrypted username/password in properties.yml:</p> <p>Place the generated text between \u201cENC(\u201d and \u201c)\u201d Build the project. </p> </li> <li> <p>Running your project using spring-boot:run:      Run the below from project directory:</p> <p>mvn spring-boot:run -Djasypt.encryptor.password=MY_PASS ./gradlew bootRun -Djasypt.encryptor.password=MY_PASS</p> </li> <li> <p>Running project\u2019s jar:   Run the below from project target directory:</p> <p>java -jar target\\jasypt-test-0.0.1-SNAPSHOT.jar --jasypt.encryptor.password=MY_PASS</p> </li> </ol>"},{"location":"fortigate/IPsec%20for%20Ubuntu/","title":"Set up IPsec VPN for Linux Systems","text":"<ul> <li>Go to <code>VPN</code> -&gt; <code>IPsec</code> -&gt; <code>Tunnels</code></li> <li>Create new <code>Tunnels</code></li> <li>Select <code>Dialup - Android (Native L2TP/IPsec)</code></li> <li>Authentication<ul> <li><code>WAN1</code> - Incomming Interfaces</li> <li><code>Pre-shared key</code> - Authentication method (Enter the password)</li> <li><code>VPN Group</code> - Select the VPN Group</li> </ul> </li> <li>Policy &amp; Routing<ul> <li><code>Internal</code> - Local Interface</li> <li><code>all</code> - Local Address</li> <li><code>192.168.0.2-192.168.0.253</code> - client Address</li> <li><code>255.255.255.255</code> - Subnet mask</li> </ul> </li> </ul>"},{"location":"fortigate/Port%20Forwarding/","title":"Port Forwarding(Virtual IP) with FortiGate firewall","text":"<p>Forwarding IP (internet) to local/internal server VM ip addresses</p> <p>Device : FortiGate 60D</p> <p>Configuration Setps:-</p> <ol> <li> <p>Virtual IP</p> </li> <li> <p>Firewall Policy</p> </li> </ol>"},{"location":"fortigate/Port%20Forwarding/#virtual-ip","title":"Virtual IP","text":"<ol> <li> <p>Login to Fortinet, and go to <code>Policy &amp; Objects</code> -&gt; <code>Objects</code> and select <code>Vitual IPs</code> &amp; <code>create new Virtual IPs</code></p> <ul> <li>Select interface <code>WAN 1</code></li> <li>Give external IP address /range     <code>0.0.0.0</code> - Can be accessed from any where</li> <li>Give Map to port     <code>192.168.0.27</code> - Destination internal VM ip address</li> <li>Enable Port     ** Give same port on both external and internal to map</li> </ul> </li> </ol>"},{"location":"fortigate/Port%20Forwarding/#firewall-policy","title":"Firewall Policy","text":"<ol> <li> <p>Create <code>New Policy</code> with following configuration</p> <ul> <li>Incomming interface <code>WAN 1</code> - same as vitual ip interface</li> <li>Source <code>all</code></li> <li>Destination      ** Newly created vitual ip</li> <li>Schedule - alway</li> <li>service - all</li> <li>NAT - off</li> </ul> <p></p> </li> </ol>"},{"location":"fortigate/Load%20balancer/Dual%20Intenet%20connection/","title":"Set up Dual/Load balancer internet in Fortigate","text":"<ol> <li>Set up WAN1</li> <li>Plugin the second network (AIRTEL) to WAN2 port</li> <li>Create new <code>Interface</code> under <code>system-&gt;network-Interfaces</code></li> <li>Configure similar to the image<ul> <li>Addressing mode - <code>DHCP</code></li> <li>Retrieve default gateway from server <code>Check the box</code></li> <li>Override internal DNS <code>UnCheck the box</code></li> </ul> </li> <li>Create policy and configure<ul> <li>Incoming Interface - <code>internal</code></li> <li>Source Address  - <code>all</code></li> <li>Outgoing Interface - <code>wan2(airtel)</code></li> <li>Destination Address - <code>all</code></li> <li>Service - <code>ALL</code></li> <li>Action - <code>ACCEPT</code></li> <li>Firewall / Network Options - <code>NAT</code> =&gt; <code>ON</code><ul> <li>Use Outgoing Interface Address - <code>Check the radio button</code></li> </ul> </li> </ul> </li> <li>Backup router distance should be less than default one.        </li> </ol>"},{"location":"git/Export/","title":"Export","text":"<p>Export project</p> <p>To export with latest commit of current branch</p> <pre><code>git archive -o /Users/thirumal/Downloads/latest.zip HEAD\n</code></pre>"},{"location":"git/Troubleshoot/","title":"ssh: connect to host bitbucket.org port 22: Connection timed out","text":"<ol> <li> <p>Open <code>ssh config</code> file</p> <pre><code> vi ~/.ssh/config\n</code></pre> </li> <li> <p>Add these lines and save it.</p> <pre><code>  Host bitbucket.org\n  Hostname  altssh.bitbucket.org\n  Port  443\n</code></pre> </li> </ol>"},{"location":"git/commands/","title":"Commands","text":"<ol> <li> <p>Create Repository</p> <pre><code>git init\n\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n\ngit push -u REMOTE-NAME BRANCH-NAME\n</code></pre> </li> <li> <p>Create new BRANCH locally</p> <pre><code>git checkout -b NEW-BRANCH-NAME\n</code></pre> <p>To push the locally created new branch to remote</p> <pre><code>git push --set-upstream origin  NEW-BRANCH-NAME\n</code></pre> </li> <li> <p>List local branches</p> <pre><code>git branch\n</code></pre> </li> <li> <p>Switch branch</p> <pre><code>git checkout branch-name\n</code></pre> </li> <li> <p>Stash/Un-Stash files</p> <p>One of the ways to resolve the checkout error is to stash the changes. This is usually done temporarily to save the work you have done so far in the current branch \u2014 if you are not ready to commit these changes.</p> <pre><code>git stash\n</code></pre> <p>To recover or undo the stashed changes, we can come back to the branch where we stashed the changes and pop them.</p> <pre><code>git stash pop\n</code></pre> </li> <li> <p>Check branch status</p> <pre><code>git status\n</code></pre> </li> <li> <p>Rename local branch</p> <pre><code>git branch -m OLD-BRANCH-NAME NEW-BRANCH-NAME\n</code></pre> </li> <li> <p>Rename remote branch</p> <pre><code>git push origin :OLD-BRANCH-NAME NEW-BRANCH-NAME\n</code></pre> </li> <li> <p>Synchronise branch changes</p> <pre><code># To add all changes\ngit add .\n# To add a specific file\ngit add FILE-PATH\ngit commit -m \"COMMIT-MESSAGE\"\ngit add FILE-PATH\ngit commit --amend -m \"CHANGE-COMMIT-MESSAGE\"\n</code></pre> </li> <li> <p>Clone repository</p> <pre><code>git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n</code></pre> </li> <li> <p>Checking commit log</p> <pre><code>git log\n</code></pre> </li> <li> <p>Reset to the last commit</p> <pre><code>git reset -hard origin/BRANCH-NAME\n</code></pre> </li> <li> <p>Merge local repository with the remote repository</p> <pre><code># Fetch remote from github\ngit fetch REMOTE-NAME\n# Merge remote branch with local branch\ngit merge REMOTE-NAME/BRANCH-NAME\n\ngit pull REMOTE-NAME BRANCH-NAME\n</code></pre> </li> <li> <p>Move a commit from one branch to another</p> <pre><code>git cherry-pick COMMIT-HASH\n</code></pre> </li> <li> <p>Remove untracked files &amp; directories</p> <pre><code># To remove untracked files\ngit clean -f\n# TO remove untracked directories\ngit clean -fd\n</code></pre> </li> <li> <p>Delete a branch on a local repository</p> <pre><code>git branch -d BRANCH-NAME\n# To forcefully delete a local branch. Be careful\ngit branch -D BRANCH-NAME\n</code></pre> </li> <li> <p>Delete a branch on a remote repository</p> <pre><code>git push REMOTE-NAME --delete BRANCH-NAME\n</code></pre> </li> <li> <p>Ignore Git permission changes</p> <pre><code>git config core.fileMode false\n</code></pre> </li> <li> <p>Fix .gitignore</p> </li> </ol>"},{"location":"git/commands/#to-create-a-new-gitignore-file","title":"To create a new .gitignore file","text":"<pre><code>    touch .gitignore# To untrack the unnecessary tracked files in your gitignore which removes everything from its index. Specific filenames can also be used instead of dot(.).\n    git rm -r --cached .\n    git add .\n    git commit -m \"gitignore fixed untracked files\"\n</code></pre>"},{"location":"git/git_repo_migration/","title":"Git repository migration","text":"<p>Git repository migration,</p> <pre><code>git clone --mirror https://codecommit-url/exampleuser/repository-to-mirror.git\n# Make a bare mirrored clone of the repository\n\ncd repository-to-mirror.git\ngit remote set-url --push origin https://codecommit-url/exampleuser/mirrored\n# Set the push location to your mirror\n\ngit push --mirror\n</code></pre> <p>It uses :-</p> <pre><code>git clone --mirror: to clone every references (commits, tags, branches)\n\ngit push --mirror: to push everything\n</code></pre>"},{"location":"git/ssh_git_clone/","title":"Ssh git clone","text":""},{"location":"git/ssh_git_clone/#set-up-ssh-for-ubuntu","title":"Set up SSH for Ubuntu","text":""},{"location":"git/ssh_git_clone/#step-1-set-up-your-default-identity","title":"Step 1. Set up your default identity","text":"<ol> <li>Open Terminal (Ctrl + Alt + T) and enter the following command to set up your default identity <code>ssh-keygen</code></li> </ol> <p>Eg:  <code>thirumal@thirumal:~/git$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/thirumal/.ssh/id_rsa):   <pre><code>2. Press enter to accept the default key and path, `/c/Users/&lt;username&gt;/.ssh/id_rsa`.\n3. Enter and re-enter a passphrase when prompted.The command creates your default identity with its public and private keys. The whole interaction looks similar to this:\n</code></pre>  Enter passphrase (empty for no passphrase):  Enter same passphrase again:  Your identification has been saved in /home/thirumal/.ssh/id_rsa Your public key has been saved in /home/thirumal/.ssh/id_rsa.pub The key fingerprint is: SHA256:h4xKiyvxzOWkeXcwxmkAYSZ9AsDOikB14+vgzpTnjPs thirumal@thirumal The key's randomart image is: +---[RSA 3072]----+ |*o=o o           | | *+ + .          | |+  + .           | |.o  . .o .       | |+  ..+..S .      | |+ .o*oB  .       | | =.Xo= o         | |. X.B . .        | | ..*oE .         | +----[SHA256]-----+</code></p>"},{"location":"git/ssh_git_clone/#step-2-add-the-public-key-to-your-account-settings","title":"Step 2 Add the public key to your Account settings","text":"<ol> <li>Copy your public key using the following command  <code>cat ~/.ssh/id_rsa.pub</code></li> <li>Add it to your account </li> <li>Return to your terminal and clone the repository using ssh <code>git@github.com:M-Thirumal/installation_guide.git</code></li> </ol>"},{"location":"git/ssh_git_clone/#authentication-test","title":"Authentication Test","text":"<ol> <li>Now run following command to test authentication from server command line terminal</li> </ol> <p>Bitbucket</p> <pre><code>ssh -T git@bitbucket.org\n</code></pre> <p>Github</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Gitlab</p> <pre><code>ssh -T git@gitlab.com\n</code></pre>"},{"location":"git/ssh_git_clone/#origin-url-replacement","title":"Origin URL Replacement","text":"<p>Go to repo directory and open <code>vi .git/config</code> file</p> <p>Replace remote <code>origin</code> url (which starts with https) with following -</p> <pre><code>For Bitbucket - git@bitbucket.org:&lt;username&gt;/&lt;repo&gt;.git\n\nFor Github - git@github.com:&lt;username&gt;/&lt;repo&gt;.git\n\nFor Gitlab - git@gitlab.com:&lt;username&gt;/&lt;repo&gt;.git\n</code></pre>"},{"location":"git/ssh_git_clone/#troubleshoot","title":"Troubleshoot","text":"<p>ssh \"permissions are too open\" error</p> <pre><code>Permissions 0777 for '/Users/username/.ssh/id_rsa' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\n</code></pre> <p>Keys need to be only readable:</p> <pre><code>chmod 400 ~/.ssh/id_rsa\n</code></pre> <p>If Keys need to be read-writable:</p> <pre><code>chmod 600 ~/.ssh/id_rsa\n</code></pre>"},{"location":"maven/upgrade_maven/","title":"Upgrade Maven in Ubuntu","text":"<pre><code>wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz\nsudo mkdir -p /usr/local/apache-maven\nsudo mv apache-maven-3.8.6-bin.tar.gz /usr/local/apache-maven\ncd /usr/local/apache-maven\nsudo tar -xzvf apache-maven-3.8.6-bin.tar.gz\n</code></pre> <p>Edit <code>~/.profile</code> with <code>sudo vi ~/.profile</code> and add these four lines:   </p> <pre><code>export M2_HOME=/usr/local/apache-maven/apache-maven-3.8.6\nexport M2=$M2_HOME/bin\nexport MAVEN_OPTS=\"-Xms256m -Xmx512m\"\nexport PATH=$M2:$PATH\n</code></pre> <p>then, execute <code>~/.profile</code></p> <pre><code>source ~/.profile\n</code></pre> <p>Check the version</p> <pre><code>mvn --version\n</code></pre>"},{"location":"ngrok/install_and_setup_local_tunnel/","title":"Install ngrok and set up localhost tunnel","text":"<ol> <li> <p>Download https://ngrok.com/download</p> </li> <li> <p><code>unzip</code> downloaded file to <code>/usr/bin</code></p> <p><code>sudo unzip /path/to/ngrok.zip</code></p> <p><code>sudo cp ngrok /usr/bin/</code></p> </li> <li> <p>To start &amp; enable localhost tunnel in background</p> <p><code>nohup ngrok http 3000 &amp;</code> </p> <pre><code>        or\n</code></pre> <p><code>ngrok http 5000 &gt; /dev/null &amp;</code> </p> </li> <li> <p>Then use <code>localhost:4040/status</code> to get/check the url status</p> </li> <li> <p>To stop ngrok     <code>pkill ngrok</code></p> </li> </ol>"},{"location":"pgadmin4/Reverse_Proxying_with_ngnix/","title":"Reverse Proxying for Pgadmin 4","text":""},{"location":"pgadmin4/Reverse_Proxying_with_ngnix/#1-set-up-pgamin4-using-docker","title":"1. Set up Pgamin4 using Docker","text":""},{"location":"pgadmin4/Reverse_Proxying_with_ngnix/#2-http-via-nginx","title":"2. HTTP via Nginx","text":"<p>Add the following code inside http{} in <code>/et/ngnix/ngnix.config</code> and replace <code>{SERVER_IP}</code> with server ip address</p> <pre><code>server {\n    listen 80;\n    server_name {SERVER_IP}\n    location /pgadmin4/ {\n        proxy_set_header X-Script-Name /pgadmin4;\n        proxy_set_header Host $host;\n        proxy_pass http://localhost:5050/;\n        proxy_redirect off;\n    }\n}\n</code></pre>"},{"location":"pgadmin4/Reverse_Proxying_with_ngnix/#3-https-via-nginx","title":"3. HTTPS via Nginx","text":""},{"location":"pgadmin4/install_pgadmin4_using_apache2/","title":"Install PgAdmin 4 using Apache2 in Ubuntu","text":"<ol> <li>Add GPG key and repository <pre><code> sudo apt-get install wget ca-certificates \n wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \n sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" &gt;&gt; /etc/apt/sources.list.d/pgdg.list' \n</code></pre></li> <li> <p>Install PgAdmin4 &amp; apache2 with default e-mail/user-id and password</p> <pre><code> sudo apt-get install pgadmin4 pgadmin4-apache2 \n</code></pre> <p>Enter email &amp; password to complete the installation process </p> </li> <li> <p>Go to http://localhost/pgadmin4 and login with email &amp; password which you have given in the installation process</p> </li> </ol> <p></p>"},{"location":"pgadmin4/install_pgadmin4_using_docker/","title":"Install &amp; Configure PgAdmin 4 using docker","text":"<ol> <li> <p>Install PostgreSQL</p> </li> <li> <p>Set up docker     <pre><code>sudo apt install docker.io\n</code></pre></p> </li> <li> <p>Pull pgadmin4 image     <pre><code>sudo docker pull dpage/pgadmin4\n</code></pre></p> </li> <li>Create a directory in the host to store session data of PgAdmin4     <pre><code>sudo mkdir /var/lib/pgadmin\n</code></pre></li> <li>Map to Pgadmin user &amp; group 5050     <pre><code>sudo chown -R 5050:5050 /var/lib/pgadmin/\n</code></pre></li> <li>Finally run the docker image     <pre><code>sudo docker run --name pgadmin -p 80:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre></li> </ol> <p>or For Reverse Proxy </p> <pre><code>sudo docker run --name pgadmin -p 5050:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre> <ol> <li> <p>Enter your IP address in the browser to access pgadmin4</p> </li> <li> <p>Create server with host name/address <code>172.17.0.1</code></p> <p></p> </li> <li> <p>To start docker container</p> <p><code>sudo docker start pgadmin</code></p> </li> </ol> <p></p> <ol> <li>Set up Reverse Proxy with Ngnix</li> </ol>"},{"location":"pgadmin4/update_pgadmin4_docker_image/","title":"Update pgadmin4 docker image","text":""},{"location":"pgadmin4/update_pgadmin4_docker_image/#update-pgadmin4-docker-image","title":"Update PgAdmin4 docker image","text":"<ol> <li>Pull the latest docker image</li> </ol> <pre><code> sudo docker pull dpage/pgadmin4\n</code></pre> <ol> <li>Stop the running container</li> </ol> <pre><code>sudo docker stop pgadmin\n</code></pre> <ol> <li>Remove existing container</li> </ol> <pre><code> sudo docker rm pgadmin\n or \n sudo docker rm --force pgadmin\n</code></pre> <ol> <li>Run the latest images</li> </ol> <p><pre><code> sudo docker run --name pgadmin -p 80:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre> or the below command for reverse proxy with ngnix <pre><code>sudo docker run --name pgadmin -p 5050:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre></p> <p>Auto start the <code>PgAdmin4</code> during the system boot</p> <pre><code>sudo docker run --restart always --name pgadmin -p 5050:80 -v /var/lib/pgadmin:/var/lib/pgadmin  -e 'PGADMIN_DEFAULT_EMAIL=m.thirumal@hotmail.com' -e 'PGADMIN_DEFAULT_PASSWORD=thirumal' -d dpage/pgadmin4\n</code></pre> <ol> <li>To start docker container</li> </ol> <pre><code>sudo docker start pgadmin\n</code></pre> <p></p>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/","title":"Build pgmodeler from source mac","text":""},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#build-pgmodeler-from-the-source-for-mac","title":"Build pgmodeler from the source for MAC","text":""},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#clone","title":"Clone","text":"<pre><code>git clone https://github.com/pgmodeler/pgmodeler.git\ncd pgmodeler\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#build","title":"Build","text":"<ol> <li>Install PostgreSQL</li> <li>Install Xcode</li> <li>Install libxml2, qt &amp; libpq</li> </ol> <p><code>brew install qt libxml2 libpq</code></p> <p>And change the installation path in <code>pgmodeler.pri</code>, something similar to the following configuration</p> <pre><code>macx {\n  PGSQL_LIB = /Applications/Postgres.app/Contents/Versions/latest/lib/libpq.dylib\n  PGSQL_INC = /Applications/Postgres.app/Contents/Versions/latest/include\n  XML_INC = /usr/local/Cellar/libxml2/2.10.3_2/include/libxml2\n  XML_LIB = /usr/local/Cellar/libxml2/2.10.3_2/lib/libxml2.dylib\n  INCLUDEPATH += $$PGSQL_INC $$XML_INC\n}\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#for-m1-m2-chip","title":"For M1, M2... Chip","text":"<pre><code>macx {\n  !defined(PGSQL_LIB, var): PGSQL_LIB = /Applications/Postgres.app/Contents/Versions/latest/lib/libpq.dylib\n  !defined(PGSQL_INC, var): PGSQL_INC = /Applications/Postgres.app/Contents/Versions/latest/include\n  !defined(XML_INC, var): XML_INC = /opt/homebrew/opt/libxml2/include/libxml2\n  !defined(XML_LIB, var): XML_LIB = /opt/homebrew/opt/libxml2/lib/libxml2.dylib\n  INCLUDEPATH += \"$$PGSQL_INC\" \"$$XML_INC\"\n}\n</code></pre> <p>then, run the below command to build</p> <pre><code>/usr/local/opt/qt/bin/qmake -r pgmodeler.pro\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#for-m1-m2-chip_1","title":"For M1, M2 Chip","text":"<pre><code>/opt/homebrew/opt/qt6/bin/qmake -r pgmodeler.pro\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#install","title":"Install","text":"<p>Run the below command to install pgModeler in <code>/Application</code></p> <pre><code>make &amp;&amp; make install\n</code></pre> <p>Go to application and select pgmodeler</p> <p>Enjoy !!!</p> <p></p> <p></p>"},{"location":"pgmodeler/build_pgmodeler_from_source_mac/#known-problem","title":"Known Problem","text":"<ul> <li>Dark shaded table and relationships</li> </ul> <p>Go to -&gt; PgModeler -&gt; Preferences -&gt; Appearance -&gt; Select <code>Default</code></p>"},{"location":"pgmodeler/build_pgmodeler_from_source_ubuntu/","title":"Build PgModeler from source =&gt; Ubuntu","text":""},{"location":"pgmodeler/build_pgmodeler_from_source_ubuntu/#installing-libraries-dependencies","title":"Installing libraries (Dependencies)","text":"<pre><code> 1.  sudo apt-get install build-essential\n 2.  sudo apt-get install git\n 3.  sudo apt-get install qtcreator\n 4.  sudo apt-get install qt5-default \n 5.  sudo apt-get install qt5-qmake\n 6.  sudo apt-get install libpq5\n 7.  sudo apt-get install libxml2\n 8.  sudo apt-get install pkg-config\n 9.  sudo apt-get install xml2\n 10. sudo apt-get install libxml2-dev\n 11. sudo apt-get install libpq-dev\n 12. sudo apt-get install libqt5svg5-dev\n</code></pre> <p>or install all dependencies in one command line</p> <pre><code>sudo apt-get install build-essential git qtcreator qt6-base-dev qt5-qmake libpq5 libxml2 pkg-config xml2 libxml2-dev libpq-dev libqt5svg5-dev\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_ubuntu/#getting-the-source","title":"Getting the source","text":"<p>Clone the PgModeler from github https://github.com/pgmodeler/pgmodeler.git</p> <pre><code>git clone https://github.com/pgmodeler/pgmodeler.git\ncd pgmodeler\n</code></pre>"},{"location":"pgmodeler/build_pgmodeler_from_source_ubuntu/#build-the-application","title":"Build the application","text":"<p>Once everything is prepared, you can compile and install pgmodeler using the following commands</p> <pre><code>qmake pgmodeler.pro\nmake\nsudo make install\n</code></pre> <p>The binary will be available in /usr/local/bin/</p>"},{"location":"pgmodeler/build_pgmodeler_from_source_ubuntu/#open-pgmodeler","title":"Open PgModeler","text":"<p>Just type the below command in terminal</p> <pre><code>pgmodeler\n</code></pre> <p>Tested with Ubuntu-20.04 Enjoy !!!</p> <p></p>"},{"location":"python/installation/","title":"Installation","text":""},{"location":"python/installation/#ubuntu-installation","title":"Ubuntu Installation","text":"<ol> <li> <p>By default <code>Ubuntu</code> comes with <code>Python3</code>,</p> </li> <li> <p>Check the version of <code>python</code></p> <pre><code>python3 --version\n</code></pre> </li> </ol>"},{"location":"python/installation/#install-pip-in-ubuntu","title":"Install <code>PIP</code> in ubuntu","text":"<ol> <li> <p>Update <code>Ubuntu OS</code></p> <pre><code>sudo apt update\n</code></pre> </li> <li> <p>Install <code>pip</code></p> <pre><code>sudo apt install python3-pip\n</code></pre> </li> <li> <p>Install requirements from files</p> <pre><code>pip3 install -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"redis/docker/","title":"Redis Docker set up","text":"<pre><code>docker pull redis\n</code></pre>"},{"location":"redis/install/","title":"Install","text":""},{"location":"redis/install/#install-redis-server-in-ubuntu","title":"Install Redis Server in Ubuntu","text":"<pre><code>sudo apt-get install redis-server\n</code></pre>"},{"location":"redis/install/#to-check-the-status","title":"To Check the status","text":"<pre><code>ps aux | grep redis\n</code></pre>"},{"location":"redis/install/#to-start-redis-server","title":"To start redis server","text":"<pre><code>nohup redis-server &amp;\n</code></pre>"},{"location":"redis/install/#mac-installlation-configuration","title":"Mac installlation &amp; Configuration:","text":"<pre><code>$ mkdir redis &amp;&amp; cd redis\n$ curl -O http://download.redis.io/redis-stable.tar.gz\n$ tar xzvf redis-stable.tar.gz\n$ cd redis-stable\n$ make\n$ make test\n$ sudo make install\n</code></pre>"},{"location":"redis/install/#to-start-redis-server_1","title":"To Start redis server","text":"<pre><code>redis-server\n</code></pre>"},{"location":"redis/install_redis_in_mac_from_source/","title":"Install Redis in MAC OS from source code","text":"<ol> <li> <p>Create and change directory</p> <p><code>mkdir redis &amp;&amp; cd redis</code></p> </li> <li> <p>Download the source and extract</p> <p><code>curl -O http://download.redis.io/redis-stable.tar.gz</code></p> </li> <li> <p>Run the test and install     <pre><code>make\nmake test\nsudo make install\n</code></pre></p> </li> <li> <p>Start the redis-server</p> <p><code>redis-server</code></p> </li> </ol>"},{"location":"redis/install_redis_in_mac_from_source/#test-with-redi-cli","title":"Test with redi-cli","text":"<pre><code>redis-cli ping\n</code></pre> <p>If the above command returns pong then redis is installed correctly and working good</p>"},{"location":"redis/redis-client/","title":"Redis client","text":""},{"location":"redis/redis-client/#redis-cli","title":"redis-cli:","text":"<pre><code>* redis-cli ping\n  \u25cb Reply pong\n* Client bash\n  \u25cb redis-cli\n    * set foo bar\n    * Get foo\n</code></pre>"},{"location":"redis/redis-client/#redis-web-based-client-","title":"Redis web-based client:-","text":"<pre><code>sudo npm install -g redis-commander\n\nredis-commander\n</code></pre>"},{"location":"spring-boot-jar/Create%20linux%20process/","title":"Create linux process","text":""},{"location":"spring-boot-jar/Create%20linux%20process/#createrun-jar-as-linux-process","title":"Create/Run JAR as linux process","text":"<pre><code>exec -a \"app\" java -jar app-1.0.0-SNAPSHOT.jar\u00a0 --jasypt.encryptor.password=thirumal\n</code></pre>"},{"location":"spring-boot-jar/create_jar/","title":"Create jar for Spring-Boot Project","text":""},{"location":"spring-boot-jar/create_jar/#gradle","title":"Gradle:","text":"<p>In <code>gradle</code> project, go to project directory run the following command to create jar</p> <pre><code> ./gradlew build\n</code></pre> <p>Without test</p> <pre><code>./gradlew build -x test\n</code></pre> <p>The above command will create the <code>JAR</code> in the directory <code>/build/libs/ {XXXXX.jar}</code></p>"},{"location":"spring-boot-jar/create_jar/#maven","title":"Maven:","text":"<pre><code> mvn install\n</code></pre> <p>To skip test</p> <pre><code>mvn install \u2013DskipTests\n</code></pre> <p>In Mac,</p> <pre><code>mvn clean install\n\nmvn clean package -DskipTests=true\n</code></pre>"},{"location":"visualVm/visualvm_remote_set_up/","title":"How to set up remote visual VM","text":"<ol> <li> <p>Check if the <code>hostname</code> correctly resolves to the <code>host address</code>.  </p> </li> <li> <p>Run <code>hostname -i</code> command. If it reports <code>127.0.0.1</code>, <code>JConsole</code> would not be able to connect to the JVM running on that Linux machine.      To fix this issue, edit <code>/etc/hosts</code> so that the <code>hostname</code> resolves to the <code>host address</code></p> </li> <li> <p>We need set the below properties while running jar</p> </li> </ol> <pre><code>    -Dcom.sun.management.jmxremote=true \n    -Dcom.sun.management.jmxremote.port=&lt;PORT&gt; \n    -Dcom.sun.management.jmxremote.authenticate=false \n    -Dcom.sun.management.jmxremote.ssl=false \n    -Djava.rmi.server.hostname=&lt;SEVER IP_ADDRESS&gt; \n    -Dcom.sun.management.jmxremote.rmi.port=&lt;PORT&gt;\n</code></pre> <ol> <li> <p>Example</p> <p><code>java -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=6001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.0.23 -Dcom.sun.management.jmxremote.rmi.port=6001 -jar app-1.0.0-SNAPSHOT.jar</code> </p> </li> <li> <p>Go to <code>Visual VM</code> -&gt; <code>Remote</code> -&gt; <code>Add Remote host</code> with  -&gt; <code>Add JMX Connection</code> with the  <p></p>"},{"location":"zipkin/Docker_zipkin/","title":"Install zipkin in Docker","text":"<pre><code>docker run -d -p 9411:9411 openzipkin/zipkin\n</code></pre>"}]}